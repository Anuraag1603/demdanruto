*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.41 Build 10203, Jul 23 2010

    1:                                                                                                                          // ----------------------------------------
    2:  // Filename: analog.c
    3:  // Description: Routines for setting up and
    4:  //   reading from the ADC/DAC
    5:  // Author: Danny Sok
    6:  //         Edward Khou
    7:  // Date: 24-09-2011
    8:  // Date Last Modified: 12-10-2011 
    9:  
   10:  #include "analog.h"
   11:  
   12:  
   13:  static const INT16 ADC_OFFSET = 2048; // 12 Bit Offset, 1000 0000 0000
   14:  
   15:  // ----------------------------------------
   16:  // Analog_Setup
   17:  // 
   18:  // Sets up the ADC and DAC
   19:  // Input:
   20:  //   busClk is the bus clock speed
   21:  // Output:
   22:  //   none
   23:  // Conditions:
   24:  //   none
   25:  
   26:  void Analog_Setup(const UINT32 busClk) 
   27:  {
*** EVALUATION ***

Function: Analog_Setup
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\analog.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\analog.c.o" -WmsgSd1106 -WmsgSd5703

  0000 1b94         [2]     LEAS  -12,SP
  0002 3b           [2]     PSHD  
  0003 34           [2]     PSHX  
   28:    
   29:    TSPISetup aSPISetup;
   30:      
   31:    aSPISetup.isMaster          = bTRUE;                      // Master
  0004 c601         [1]     LDAB  #1
  0006 87           [1]     CLRA  
  0007 6c84         [2]     STD   4,SP
   32:    aSPISetup.activeLowClock    = bFALSE;                     // High clock
  0009 6987         [2]     CLR   7,SP
  000b 6986         [2]     CLR   6,SP
   33:    aSPISetup.evenEdgeClock     = bTRUE;                      // Even
  000d 6c88         [2]     STD   8,SP
   34:    aSPISetup.LSBFirst          = bFALSE;                     // MSB
  000f c7           [1]     CLRB  
  0010 6c8a         [2]     STD   10,SP
   35:    aSPISetup.baudRate          = 1000000;                    // 1 Mbit
  0012 ce4240       [2]     LDX   #16960
  0015 6e8e         [2]     STX   14,SP
  0017 c60f         [1]     LDAB  #15
  0019 6c8c         [2]     STD   12,SP
   36:    
   37:    NbAnalogInputs.l            = 2;
  001b c602         [1]     LDAB  #2
  001d 7c0000       [3]     STD   NbAnalogInputs
   38:    NbAnalogOutputs.l           = 2;
  0020 7c0000       [3]     STD   NbAnalogOutputs
   39:    
   40:    SPI_Setup(&aSPISetup, busClk);
  0023 1984         [2]     LEAY  4,SP
  0025 35           [2]     PSHY  
  0026 ec84         [3]     LDD   4,SP
  0028 ee82         [3]     LDX   2,SP
  002a 160000       [4]     JSR   SPI_Setup
   41:    
   42:    // Init 0 for ADC
   43:    PTH_PTH4 = 0;
  002d 1d000010     [4]     BCLR  _PTH,#16
   44:    PTH_PTH5 = 0;
  0031 1d000020     [4]     BCLR  _PTH,#32
   45:    PTH_PTH6 = 0;
  0035 1d000040     [4]     BCLR  _PTH,#64
   46:  }
  0039 1bf012       [2]     LEAS  18,SP
  003c 3d           [5]     RTS   
   47:  
   48:  // ----------------------------------------
   49:  // PWM_Setup
   50:  // 
   51:  // Sets up the Pulse Width Modulators for use with the DAC (missing LPFilter)
   52:  // Input:
   53:  //   busClk is the bus clock speed
   54:  // Output:
   55:  //   none
   56:  // Conditions:
   57:  //   none
   58:  void PWM_Setup(const UINT32 busClk)
   59:  {
*** EVALUATION ***

Function: PWM_Setup
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\analog.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\analog.c.o" -WmsgSd1106 -WmsgSd5703

   60:    // 50 Duty Cycle => PWMDTY = 128, PWMPER = 256
   61:    // Setup 2 PWMs, one for Voltage, one for Current
   62:    
   63:    // PWM Setups
   64:    
   65:    PWMPOL_PPOL0  = 1;    // Low to High 50
  0000 4c0001       [4]     BSET  _PWMPOL,#1
   66:    PWMPOL_PPOL1  = 1;    // Low to High 25
  0003 4c0002       [4]     BSET  _PWMPOL,#2
   67:    PWMPOL_PPOL2  = 1;    // Low to High 0
  0006 4c0004       [4]     BSET  _PWMPOL,#4
   68:    PWMPOL_PPOL3  = 0;    // High to Low 50
  0009 4d0008       [4]     BCLR  _PWMPOL,#8
   69:    PWMPOL_PPOL4  = 0;    // High to Low 25
  000c 4d0010       [4]     BCLR  _PWMPOL,#16
   70:    PWMPOL_PPOL5  = 0;    // High to Low 0
  000f 4d0020       [4]     BCLR  _PWMPOL,#32
   71:    
   72:    PWMCLK_PCLK0  = 1;    // Clock A
  0012 4c0001       [4]     BSET  _PWMCLK,#1
   73:    PWMCLK_PCLK1  = 1;    // Clock A
  0015 4c0002       [4]     BSET  _PWMCLK,#2
   74:    PWMCLK_PCLK2  = 1;    // Clock B
  0018 4c0004       [4]     BSET  _PWMCLK,#4
   75:    PWMCLK_PCLK3  = 1;    // Clock B
  001b 4c0008       [4]     BSET  _PWMCLK,#8
   76:    PWMCLK_PCLK4  = 1;    // Clock A
  001e 4c0010       [4]     BSET  _PWMCLK,#16
   77:    PWMCLK_PCLK5  = 1;    // Clock A
  0021 4c0020       [4]     BSET  _PWMCLK,#32
   78:    
   79:    PWMCAE_CAE0   = 0;    // Left Align
  0024 4d0001       [4]     BCLR  _PWMCAE,#1
   80:    PWMCAE_CAE1   = 0;    // Left Align
  0027 4d0002       [4]     BCLR  _PWMCAE,#2
   81:    PWMCAE_CAE2   = 0;    // Left Align
  002a 4d0004       [4]     BCLR  _PWMCAE,#4
   82:    PWMCAE_CAE3   = 0;    // Left Align
  002d 4d0008       [4]     BCLR  _PWMCAE,#8
   83:    PWMCAE_CAE4   = 0;    // Left Align
  0030 4d0010       [4]     BCLR  _PWMCAE,#16
   84:    PWMCAE_CAE5   = 0;    // Left Align
  0033 4d0020       [4]     BCLR  _PWMCAE,#32
   85:    
   86:    PWMPRCLK_PCKA = 7;    // busClk / 128 prescale
  0036 4c0007       [4]     BSET  _PWMPRCLK,#7
   87:    PWMPRCLK_PCKB = 7;    // busClk / 128 prescale
  0039 4c0070       [4]     BSET  _PWMPRCLK,#112
   88:    
   89:    
   90:    PWMCTL_CON01  = 0;    // Seperate Channel
  003c 4d0010       [4]     BCLR  _PWMCTL,#16
   91:    PWMCTL_CON23  = 0;    // Seperate Channel
  003f 4d0020       [4]     BCLR  _PWMCTL,#32
   92:    PWMCTL_CON45  = 0;    // Seperate Channel
  0042 4d0040       [4]     BCLR  _PWMCTL,#64
   93:    
   94:    PWMCTL_PSWAI  = 1;    // PWM Stops in Wait Mode           :: 1 Stop Input Clock
  0045 4c0008       [4]     BSET  _PWMCTL,#8
   95:    PWMCTL_PFRZ   = 1;    // PWM Counters Stop in Freeze Mode :: 1 Disable PWM Input Clock
  0048 4c0004       [4]     BSET  _PWMCTL,#4
   96:    
   97:    PWMPER0       = 255;
  004b cc7fff       [2]     LDD   #32767
  004e 5b00         [2]     STAB  _PWMPER01
   98:    PWMPER1       = 255;
  0050 5b00         [2]     STAB  _PWMPER01:1
   99:    PWMPER2       = 255;
  0052 5b00         [2]     STAB  _PWMPER23
  100:    PWMPER3       = 255;
  0054 5b00         [2]     STAB  _PWMPER23:1
  101:    PWMPER4       = 255;
  0056 5b00         [2]     STAB  _PWMPER45
  102:    PWMPER5       = 255;
  0058 5b00         [2]     STAB  _PWMPER45:1
  103:    
  104:    PWMDTY0       = 127;  // 50 Duty Cycle
  005a 54           [1]     LSRB  
  005b 5b00         [2]     STAB  _PWMDTY01
  105:    PWMDTY1       = 63;   // 25 Duty Cycle
  005d 57           [1]     ASRB  
  005e 5b00         [2]     STAB  _PWMDTY01:1
  106:    PWMDTY2       = 0;    // 0  Duty Cycle
  0060 790000       [3]     CLR   _PWMDTY23
  107:    PWMDTY3       = 127;  // 50 Duty Cycle
  0063 5a00         [2]     STAA  _PWMDTY23:1
  108:    PWMDTY4       = 63;   // 25 Duty Cycle
  0065 5b00         [2]     STAB  _PWMDTY45
  109:    PWMDTY5       = 0;    // 0  Duty Cycle
  0067 790000       [3]     CLR   _PWMDTY45:1
  110:    
  111:    PWME_PWME0    = 1;    // PWM 0 Enable
  006a 4c0001       [4]     BSET  _PWME,#1
  112:    PWME_PWME1    = 1;    // PWM 1 Enable
  006d 4c0002       [4]     BSET  _PWME,#2
  113:    PWME_PWME2    = 1;    // PWM 2 Enable
  0070 4c0004       [4]     BSET  _PWME,#4
  114:    PWME_PWME3    = 1;    // PWM 3 Enable
  0073 4c0008       [4]     BSET  _PWME,#8
  115:    PWME_PWME4    = 1;    // PWM 4 Enable
  0076 4c0010       [4]     BSET  _PWME,#16
  116:    PWME_PWME5    = 1;    // PWM 5 Enable
  0079 4c0020       [4]     BSET  _PWME,#32
  117:  }
  007c 3d           [5]     RTS   
  118:  
  119:  // ----------------------------------------
  120:  // Analog_Get
  121:  // 
  122:  // Gets an analog input channel's value based on the mode
  123:  // Input:
  124:  //   channelNb is the number of the anlog input channel to read
  125:  // Output:
  126:  //   none
  127:  // Conditions:
  128:  //   Assumes that the ADC has been set up
  129:  
  130:  void Analog_Get(const TChannelNb channelNb)
  131:  {
*** EVALUATION ***

Function: Analog_Get
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\analog.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\analog.c.o" -WmsgSd1106 -WmsgSd5703

  0000 1b92         [2]     LEAS  -14,SP
  0002 3b           [2]     PSHD  
  0003 3b           [2]     PSHD  
  132:    TUINT16 conversionResult;
  133:    INT16 medianArray[3];
  134:    INT16 x, y, temp = 0;
  135:    
  136:    UINT8 txByte, txByte2, txByte3;
  137:    txByte = 0x06; // Masking out D2 and don't cares [0000 0110]
  138:    
  139:    // 0000 00(d1)(d0)
  140:    // (d1)(d0)00 0000
  141:    txByte2 = channelNb << 6;   // Channel Select
  0004 c640         [1]     LDAB  #64
  0006 a683         [3]     LDAA  3,SP
  0008 12           [1]     MUL   
  0009 6b8b         [2]     STAB  11,SP
  142:    
  143:    txByte3 = 0; // Don't cares
  000b 6984         [2]     CLR   4,SP
  144:    
  145:    // Value: 3 for Analog IO (Transmission, data to Rx)
  146:    // Value: 0 for NULL since we don't send anything to the SPI.
  147:    
  148:    // 3 Low (Inverted) for transfer (CS3) - ADC
  149:    PTH_PTH4 = 1; 
  000d c606         [1]     LDAB  #6
  000f 1c000010     [4]     BSET  _PTH,#16
  150:    PTH_PTH5 = 1;
  0013 1c000020     [4]     BSET  _PTH,#32
  151:    PTH_PTH6 = 0;
  0017 1d000040     [4]     BCLR  _PTH,#64
  152:    
  153:    SPI_ExchangeChar(txByte,  &conversionResult.s.Hi);  // Rx Values are '?' so discard.
  001b 37           [2]     PSHB  
  001c 1a88         [2]     LEAX  8,SP
  001e b754         [1]     TFR   X,D
  0020 6e81         [2]     STX   1,SP
  0022 160000       [4]     JSR   SPI_ExchangeChar
  0025 32           [3]     PULA  
  154:    SPI_ExchangeChar(txByte2, &conversionResult.s.Hi);  // Rx Values are NULL, B11->B8
  0026 e68b         [3]     LDAB  11,SP
  0028 37           [2]     PSHB  
  0029 ec81         [3]     LDD   1,SP
  002b 160000       [4]     JSR   SPI_ExchangeChar
  002e 32           [3]     PULA  
  155:    SPI_ExchangeChar(txByte3, &conversionResult.s.Lo);  // Rx Values are B7->B0
  002f e684         [3]     LDAB  4,SP
  0031 37           [2]     PSHB  
  0032 1a89         [2]     LEAX  9,SP
  0034 b754         [1]     TFR   X,D
  0036 160000       [4]     JSR   SPI_ExchangeChar
  0039 32           [3]     PULA  
  156:    conversionResult.s.Hi &= 0x0F;                      // Mask out the NULL bit [? ? ? 0 B11 B10 B09 B08]
  003a 0d87f0       [4]     BCLR  7,SP,#240
  157:    
  158:    // 0 High (Inverted) for no transfer
  159:    PTH_PTH4 = 0;
  003d 1d000010     [4]     BCLR  _PTH,#16
  160:    PTH_PTH5 = 0;
  0041 1d000020     [4]     BCLR  _PTH,#32
  161:    PTH_PTH6 = 0;
  0045 1d000040     [4]     BCLR  _PTH,#64
  162:    
  163:    // Use median filter with sliding window of the 3 most recent samples
  164:    Analog_Input[channelNb].Value3 = Analog_Input[channelNb].Value2;
  0049 c60a         [1]     LDAB  #10
  004b 87           [1]     CLRA  
  004c ed82         [3]     LDY   2,SP
  004e 13           [3]     EMUL  
  004f b745         [1]     TFR   D,X
  0051 ede20000     [4]     LDY   Analog_Input:6,X
  0055 6de20000     [3]     STY   Analog_Input:8,X
  165:    Analog_Input[channelNb].Value2 = Analog_Input[channelNb].Value1;
  0059 ede20000     [4]     LDY   Analog_Input:4,X
  005d 6de20000     [3]     STY   Analog_Input:6,X
  166:    //The term 'bipolar' indicates that the signal swings above and below some reference level. 
  167:    //In single-ended systems, the input is typically referenced to analog ground, so a bipolar signal is one that swings above and below ground.
  168:    Analog_Input[channelNb].Value1 = ADC_OFFSET - (INT16)conversionResult.l;
  0061 8608         [1]     LDAA  #8
  0063 c7           [1]     CLRB  
  0064 a387         [3]     SUBD  7,SP
  0066 6ce20000     [3]     STD   Analog_Input:4,X
  169:    
  170:    
  171:    Analog_Input[channelNb].OldValue.l = Analog_Input[channelNb].Value.l;
  006a ece20000     [4]     LDD   Analog_Input,X
  006e 6ce20000     [3]     STD   Analog_Input:2,X
  172:    
  173:    medianArray[0] = Analog_Input[channelNb].Value1;
  0072 ece20000     [4]     LDD   Analog_Input:4,X
  0076 6c8c         [2]     STD   12,SP
  174:    medianArray[1] = Analog_Input[channelNb].Value2;
  0078 ece20000     [4]     LDD   Analog_Input:6,X
  007c 6c8e         [2]     STD   14,SP
  175:    medianArray[2] = Analog_Input[channelNb].Value3;
  007e ece20000     [4]     LDD   Analog_Input:8,X
  0082 6cf010       [3]     STD   16,SP
  176:    
  177:    // B.Sort. Low to High. Find Mid, yo
  178:    for (x = 0; x < 3; x++)
  0085 c7           [1]     CLRB  
  0086 87           [1]     CLRA  
  0087 6c89         [2]     STD   9,SP
  179:    {
  180:      for(y = 0; y < 2; y++)
  0089 c7           [1]     CLRB  
  008a 87           [1]     CLRA  
  008b 6c85         [2]     STD   5,SP
  181:      {
  182:        if(medianArray[y] > medianArray[y+1])
  008d ec85         [3]     LDD   5,SP
  008f 59           [1]     LSLD  
  0090 1a8c         [2]     LEAX  12,SP
  0092 1ae6         [2]     LEAX  D,X
  0094 ec00         [3]     LDD   0,X
  0096 ac02         [3]     CPD   2,X
  0098 2f06         [3/1]   BLE   *+8 ;abs = 00a0
  183:        {// swap vars
  184:          temp = medianArray[y];
  185:          medianArray[y] = medianArray[y+1];
  009a ed02         [3]     LDY   2,X
  009c 6d00         [2]     STY   0,X
  186:          medianArray[y+1] = temp;  
  009e 6c02         [2]     STD   2,X
  00a0 ee85         [3]     LDX   5,SP
  00a2 08           [1]     INX   
  00a3 6e85         [2]     STX   5,SP
  00a5 8e0002       [2]     CPX   #2
  00a8 2de3         [3/1]   BLT   *-27 ;abs = 008d
  00aa ee89         [3]     LDX   9,SP
  00ac 08           [1]     INX   
  00ad 6e89         [2]     STX   9,SP
  00af 8e0003       [2]     CPX   #3
  00b2 2dd5         [3/1]   BLT   *-41 ;abs = 0089
  187:        } 
  188:      }
  189:    }
  190:  	
  191:  	Analog_Input[channelNb].Value.l = medianArray[1]; // Middle Value of B.Sort
  00b4 c60a         [1]     LDAB  #10
  00b6 87           [1]     CLRA  
  00b7 ed82         [3]     LDY   2,SP
  00b9 13           [3]     EMUL  
  00ba ee8e         [3]     LDX   14,SP
  00bc b746         [1]     TFR   D,Y
  00be 6eea0000     [3]     STX   Analog_Input,Y
  192:    
  193:  }
  00c2 1bf012       [2]     LEAS  18,SP
  00c5 3d           [5]     RTS   
  194:  
  195:  // ----------------------------------------
  196:  // Analog_Put
  197:  // 
  198:  // Places a PWM cycle into the ADC for output
  199:  // Input:
  200:  //   channelNb is the number of the anlog input channel to output to
  201:  // Output:
  202:  //   none
  203:  // Conditions:
  204:  //   Assumes that the DAC has been set up
  205:  void Analog_Put(const TChannelNb channelNb)
  206:  {
*** EVALUATION ***

Function: Analog_Put
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\analog.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\analog.c.o" -WmsgSd1106 -WmsgSd5703

  0000 1b9c         [2]     LEAS  -4,SP
  207:    // PWM into a filter(Low)
  208:    // PWMCNTn(counter) -> Duty -> Pin Logic -> PWMn
  209:    // 50 Duty Cycle => PWMDTY = 128, PWMPER = 256
  210:    // To simulate a sine wave, modify the duty cycles e.g.
  211:    // 0-> 25 -> 50 -> 25 -> 0
  212:    // Have the values hold over the period and it should display a sine wave
  213:    // 12 bit DAC
  214:    UINT8 channelNbHex, i;
  215:    TUINT16 rxByte;
  216:    UINT8 test = 0x00;
  0002 6983         [2]     CLR   3,SP
  217:    
  218:    switch (channelNb)
  0004 044405       [3]     TBEQ  D,*+8 ;abs = 000c
  0007 040405       [3]     DBEQ  D,*+8 ;abs = 000f
  000a 2007         [3]     BRA   *+9 ;abs = 0013
  219:    {
  220:      case Ch1:
  221:        channelNbHex = 0x20;
  000c c620         [1]     LDAB  #32
  222:      break;
  000e 8f           [2]     SKIP2 
  223:      case Ch2:
  224:        channelNbHex = 0x60;
  000f c660         [1]     LDAB  #96
  0011 6b82         [2]     STAB  2,SP
  225:      break;
  226:    }
  227:    // DAC Data Structure:
  228:    // A1 A0   !PD !LDAC D11 D10 D9 D8 D7 D6 D5 D4 D3 D2 D1 D0
  229:    //|OutSel| |ContOps| |              Data                 |
  230:    // 2 1  0  3  4  5
  231:    // 0 25 50 50 25 0
  232:    //------------------------------------------------------------------------
  233:    // PWM2
  234:    // 4 Low (Inverted) for transfer (CS4) - DAC
  235:    for (i = 0; i < 50; i++);
  0013 c7           [1]     CLRB  
  0014 52           [1]     INCB  
  0015 c132         [1]     CMPB  #50
  0017 25fb         [3/1]   BCS   *-3 ;abs = 0014
  236:    
  237:    PTH_PTH4 = 0;
  0019 075f         [4]     BSR   *+97 ;abs = 007a
  238:    PTH_PTH5 = 0;
  239:    PTH_PTH6 = 1;
  240:    
  241:    
  242:    // Output Chan + Normal Operation + Input register updated [0110 0000]
  243:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  244:    //SPI_ExchangeChar( ((PWMCNT2 & 0x0F) | channelNbHex),  &rxByte.s.Hi);      
  245:    SPI_ExchangeChar(~PWMCNT2, &rxByte.s.Lo);
  001b d600         [3]     LDAB  _PWMCNT23
  001d 0770         [4]     BSR   *+114 ;abs = 008f
  246:    
  247:    
  248:      // 0 High (Inverted) for no transfer
  249:    PTH_PTH4 = 0;
  250:    PTH_PTH5 = 0;
  251:    PTH_PTH6 = 0;
  252:    
  253:    
  254:    //------------------------------------------------------------------------
  255:    // PWM1
  256:    for (i = 0; i < 50; i++);
  001f c7           [1]     CLRB  
  0020 52           [1]     INCB  
  0021 c132         [1]     CMPB  #50
  0023 25fb         [3/1]   BCS   *-3 ;abs = 0020
  257:    
  258:      // 4 Low (Inverted) for transfer (CS4) - DAC
  259:    PTH_PTH4 = 0;
  0025 0753         [4]     BSR   *+85 ;abs = 007a
  260:    PTH_PTH5 = 0;
  261:    PTH_PTH6 = 1;
  262:    
  263:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  264:    //SPI_ExchangeChar( ((PWMCNT1 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  265:    SPI_ExchangeChar(~PWMCNT1, &rxByte.s.Lo);
  0027 d600         [3]     LDAB  _PWMCNT01:1
  0029 0764         [4]     BSR   *+102 ;abs = 008f
  266:    
  267:    
  268:    // 0 High (Inverted) for no transfer
  269:    PTH_PTH4 = 0;
  270:    PTH_PTH5 = 0;
  271:    PTH_PTH6 = 0;
  272:    
  273:    
  274:    //------------------------------------------------------------------------
  275:    // PWM0
  276:    for (i = 0; i < 60; i++);
  002b c7           [1]     CLRB  
  002c 52           [1]     INCB  
  002d c13c         [1]     CMPB  #60
  002f 25fb         [3/1]   BCS   *-3 ;abs = 002c
  277:    
  278:      // 4 Low (Inverted) for transfer (CS4) - DAC
  279:    PTH_PTH4 = 0;
  0031 0747         [4]     BSR   *+73 ;abs = 007a
  280:    PTH_PTH5 = 0;
  281:    PTH_PTH6 = 1;
  282:    
  283:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  284:    //SPI_ExchangeChar( ((PWMCNT0 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  285:    SPI_ExchangeChar(~PWMCNT0, &rxByte.s.Lo);
  0033 d600         [3]     LDAB  _PWMCNT01
  0035 0758         [4]     BSR   *+90 ;abs = 008f
  286:    
  287:    
  288:    // 0 High (Inverted) for no transfer
  289:    PTH_PTH4 = 0;
  290:    PTH_PTH5 = 0;
  291:    PTH_PTH6 = 0;
  292:    
  293:    for (i = 0; i < 100; i++);
  0037 c7           [1]     CLRB  
  0038 52           [1]     INCB  
  0039 c164         [1]     CMPB  #100
  003b 25fb         [3/1]   BCS   *-3 ;abs = 0038
  294:    
  295:      // 4 Low (Inverted) for transfer (CS4) - DAC
  296:    PTH_PTH4 = 0;
  003d 073b         [4]     BSR   *+61 ;abs = 007a
  297:    PTH_PTH5 = 0;
  298:    PTH_PTH6 = 1;
  299:    
  300:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  301:    //SPI_ExchangeChar( ((PWMCNT0 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  302:    SPI_ExchangeChar(~PWMCNT0, &rxByte.s.Lo);
  003f d600         [3]     LDAB  _PWMCNT01
  0041 074c         [4]     BSR   *+78 ;abs = 008f
  303:    
  304:    
  305:    // 0 High (Inverted) for no transfer
  306:    PTH_PTH4 = 0;
  307:    PTH_PTH5 = 0;
  308:    PTH_PTH6 = 0;
  309:    
  310:    //------------------------------------------------------------------------
  311:    // PWM3
  312:    for (i = 0; i < 100; i++);
  0043 c7           [1]     CLRB  
  0044 52           [1]     INCB  
  0045 c164         [1]     CMPB  #100
  0047 25fb         [3/1]   BCS   *-3 ;abs = 0044
  313:      // 4 Low (Inverted) for transfer (CS4) - DAC
  314:    PTH_PTH4 = 0;
  0049 072f         [4]     BSR   *+49 ;abs = 007a
  315:    PTH_PTH5 = 0;
  316:    PTH_PTH6 = 1;
  317:    
  318:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  319:    //SPI_ExchangeChar( ((PWMCNT3 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  320:    SPI_ExchangeChar(~PWMCNT3, &rxByte.s.Lo);
  004b d600         [3]     LDAB  _PWMCNT23:1
  004d 0740         [4]     BSR   *+66 ;abs = 008f
  321:    
  322:    
  323:    // 0 High (Inverted) for no transfer
  324:    PTH_PTH4 = 0;
  325:    PTH_PTH5 = 0;
  326:    PTH_PTH6 = 0;
  327:    
  328:    
  329:    for (i = 0; i < 60; i++);
  004f c7           [1]     CLRB  
  0050 52           [1]     INCB  
  0051 c13c         [1]     CMPB  #60
  0053 25fb         [3/1]   BCS   *-3 ;abs = 0050
  330:      // 4 Low (Inverted) for transfer (CS4) - DAC
  331:    PTH_PTH4 = 0;
  0055 0723         [4]     BSR   *+37 ;abs = 007a
  332:    PTH_PTH5 = 0;
  333:    PTH_PTH6 = 1;
  334:    
  335:    
  336:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  337:    //SPI_ExchangeChar( ((PWMCNT3 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  338:    SPI_ExchangeChar(~PWMCNT3, &rxByte.s.Lo);
  0057 d600         [3]     LDAB  _PWMCNT23:1
  0059 0734         [4]     BSR   *+54 ;abs = 008f
  339:    
  340:    
  341:    // 0 High (Inverted) for no transfer
  342:    PTH_PTH4 = 0;
  343:    PTH_PTH5 = 0;
  344:    PTH_PTH6 = 0;
  345:    
  346:    
  347:    //------------------------------------------------------------------------
  348:    // PWM4
  349:    for (i = 0; i < 50; i++);
  005b c7           [1]     CLRB  
  005c 52           [1]     INCB  
  005d c132         [1]     CMPB  #50
  005f 25fb         [3/1]   BCS   *-3 ;abs = 005c
  350:    
  351:      // 4 Low (Inverted) for transfer (CS4) - DAC
  352:    PTH_PTH4 = 0;
  0061 0717         [4]     BSR   *+25 ;abs = 007a
  353:    PTH_PTH5 = 0;
  354:    PTH_PTH6 = 1;
  355:    
  356:    
  357:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  358:    //SPI_ExchangeChar( ((PWMCNT4 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  359:    SPI_ExchangeChar(~PWMCNT4, &rxByte.s.Lo);
  0063 d600         [3]     LDAB  _PWMCNT45
  0065 0728         [4]     BSR   *+42 ;abs = 008f
  360:    
  361:    
  362:    // 0 High (Inverted) for no transfer
  363:    PTH_PTH4 = 0;
  364:    PTH_PTH5 = 0;
  365:    PTH_PTH6 = 0;
  366:    PTH_PTH6 = 0;
  0067 1d000040     [4]     BCLR  _PTH,#64
  367:    
  368:    //------------------------------------------------------------------------
  369:    // PWM5
  370:    for (i = 0; i < 50; i++);
  006b c7           [1]     CLRB  
  006c 52           [1]     INCB  
  006d c132         [1]     CMPB  #50
  006f 25fb         [3/1]   BCS   *-3 ;abs = 006c
  371:    
  372:    // 4 Low (Inverted) for transfer (CS4) - DAC
  373:    PTH_PTH4 = 0;
  0071 0707         [4]     BSR   *+9 ;abs = 007a
  374:    PTH_PTH5 = 0;
  375:    PTH_PTH6 = 1;
  376:    
  377:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  378:    //SPI_ExchangeChar( ((PWMCNT5 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  379:    SPI_ExchangeChar(~PWMCNT5, &rxByte.s.Lo);
  0073 d600         [3]     LDAB  _PWMCNT45:1
  0075 0718         [4]     BSR   *+26 ;abs = 008f
  380:    
  381:    
  382:    // 0 High (Inverted) for no transfer
  383:    PTH_PTH4 = 0;
  384:    PTH_PTH5 = 0;
  385:    PTH_PTH6 = 0;
  386:  
  387:    
  388:  }
  0077 1b84         [2]     LEAS  4,SP
  0079 3d           [5]     RTS   
  007a 0725         [4]     BSR   *+39 ;abs = 00a1
  007c 1c000040     [4]     BSET  _PTH,#64
  0080 e684         [3]     LDAB  4,SP
  0082 ea85         [3]     ORAB  5,SP
  0084 37           [2]     PSHB  
  0085 1a83         [2]     LEAX  3,SP
  0087 b754         [1]     TFR   X,D
  0089 160000       [4]     JSR   SPI_ExchangeChar
  008c 1b81         [2]     LEAS  1,SP
  008e 3d           [5]     RTS   
  008f 51           [1]     COMB  
  0090 37           [2]     PSHB  
  0091 1a84         [2]     LEAX  4,SP
  0093 b754         [1]     TFR   X,D
  0095 160000       [4]     JSR   SPI_ExchangeChar
  0098 1b81         [2]     LEAS  1,SP
  009a 0705         [4]     BSR   *+7 ;abs = 00a1
  009c 1d000040     [4]     BCLR  _PTH,#64
  00a0 3d           [5]     RTS   
  00a1 1d000010     [4]     BCLR  _PTH,#16
  00a5 1d000020     [4]     BCLR  _PTH,#32
  00a9 3d           [5]     RTS   
  389:  
