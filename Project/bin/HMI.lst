*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.41 Build 10203, Jul 23 2010

    1:  // ----------------------------------------
    2:  // Filename: HMI.c
    3:  // Description: Lab 5
    4:  //  Implements the HMI to control the LCD and menu system
    5:  //  backlighting, display and setup
    6:  // Author: Danny Sok
    7:  //         Edward Khou
    8:  // Date Created: 20-10-2011
    9:  // Date Last Modified: 2-11-2011
   10:  
   11:  #include "HMI.h"
   12:  
   13:  // Position of the cursors;
   14:  static TButtonInputs PBState, PrevPBState;
   15:  static TLCDState LCDState;
   16:  
   17:  
   18:  // ----------------------------------------
   19:  // HMI_Setup
   20:  // 
   21:  // Sets up the HMI
   22:  // Input:
   23:  //   
   24:  // Output:
   25:  //   none
   26:  // Conditions:
   27:  //  none
   28:  void HMI_Setup(void)
   29:  {
*** EVALUATION ***

Function: HMI_Setup
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\HMI.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\HMI.c.o" -WmsgSd1106 -WmsgSd5703

   30:    // Port K - Push Buttons
   31:    DDRK_BIT2 = 0;    // 0: Input, PK2
  0000 4d0004       [4]     BCLR  _DDRK,#4
   32:    DDRK_BIT3 = 0;    // 0: Input, PK3
  0003 4d0008       [4]     BCLR  _DDRK,#8
   33:    DDRK_BIT4 = 0;    // 0: Input, PK4
  0006 4d0010       [4]     BCLR  _DDRK,#16
   34:    DDRK_BIT5 = 0;    // 0: Input, PK5
  0009 4d0020       [4]     BCLR  _DDRK,#32
   35:    DDRK_BIT7 = 0;    // 0: Input, PK7
  000c 4d0080       [4]     BCLR  _DDRK,#128
   36:    
   37:    // Port A: LCD Display
   38:    DDRA_BIT0 = 1;    // 1: Output, PA0
  000f 4c0001       [4]     BSET  _DDRAB,#1
   39:    DDRA_BIT1 = 1;    // 1: Output, PA1
  0012 4c0002       [4]     BSET  _DDRAB,#2
   40:    DDRA_BIT2 = 1;    // 1: Output, PA2
  0015 4c0004       [4]     BSET  _DDRAB,#4
   41:    DDRA_BIT3 = 1;    // 1: Output, PA3
  0018 4c0008       [4]     BSET  _DDRAB,#8
   42:    DDRA_BIT4 = 1;    // 1: Output, PA4
  001b 4c0010       [4]     BSET  _DDRAB,#16
   43:    DDRA_BIT5 = 1;    // 1: Output, PA5
  001e 4c0020       [4]     BSET  _DDRAB,#32
   44:    DDRA_BIT6 = 1;    // 1: Output, PA6
  0021 4c0040       [4]     BSET  _DDRAB,#64
   45:    DDRA_BIT7 = 1;    // 1: Output, PA7
  0024 4c0080       [4]     BSET  _DDRAB,#128
   46:    
   47:    // Port B: LCD Control
   48:    DDRB_BIT0 = 1;    // 1: Output, PB0
  0027 4c0001       [4]     BSET  _DDRAB:1,#1
   49:    DDRB_BIT1 = 1;    // 1: Output, PB1
  002a 4c0002       [4]     BSET  _DDRAB:1,#2
   50:    DDRB_BIT2 = 1;    // 1: Output, PB2
  002d 4c0004       [4]     BSET  _DDRAB:1,#4
   51:    DDRB_BIT3 = 1;    // 1: Output, PB3
  0030 4c0008       [4]     BSET  _DDRAB:1,#8
   52:    DDRB_BIT4 = 1;    // 1: Output, PB4
  0033 4c0010       [4]     BSET  _DDRAB:1,#16
   53:    DDRB_BIT5 = 1;    // 1: Output, PB5
  0036 4c0020       [4]     BSET  _DDRAB:1,#32
   54:    DDRB_BIT6 = 1;    // 1: Output, PB6
  0039 4c0040       [4]     BSET  _DDRAB:1,#64
   55:    DDRB_BIT7 = 1;    // 1: Output, PB7
  003c 4c0080       [4]     BSET  _DDRAB:1,#128
   56:    
   57:    LCD_Setup();
  003f 160000       [4]     JSR   LCD_Setup
   58:    DEM_Setup();
  0042 160000       [4]     JSR   DEM_Setup
   59:      
   60:    LCDState = MeteringTime;
  0045 c601         [1]     LDAB  #1
  0047 87           [1]     CLRA  
  0048 7c0000       [3]     STD   LCDState
   61:    CreateMenu(MeteringTime);
  004b 160000       [4]     JSR   CreateMenu
   62:    
   63:    Clock_Interval      = 0;
  004e c7           [1]     CLRB  
  004f 87           [1]     CLRA  
  0050 7c0000       [3]     STD   Clock_Interval:2
  0053 7c0000       [3]     STD   Clock_Interval
   64:  }
  0056 3d           [5]     RTS   
   65:  
   66:  // ----------------------------------------
   67:  // HMI_Update
   68:  // 
   69:  // Updates the LCD display with the new values of Power, Energy, Cost and Time
   70:  // Input:
   71:  //   none
   72:  // Output:
   73:  //   none
   74:  // Conditions:
   75:  //   none
   76:  void HMI_Update(void)
   77:  {
*** EVALUATION ***

Function: HMI_Update
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\HMI.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\HMI.c.o" -WmsgSd1106 -WmsgSd5703

   78:    DEM_SetTarrif();
  0000 160000       [4]     JSR   DEM_SetTarrif
   79:    Math_FindCost();
  0003 160000       [4]     JSR   Math_FindCost
   80:    
   81:    DEM_VRMS.l = Math_FindRMS(DEM_Average_Power.l);
  0006 fc0000       [3]     LDD   DEM_Average_Power:2
  0009 160000       [4]     JSR   Math_FindRMS
  000c 7c0000       [3]     STD   DEM_VRMS
   82:    DEM_IRMS.l = Math_FindRMS(Analog_Input[Ch2].Value.l);
  000f fc0000       [3]     LDD   Analog_Input:10
  0012 160000       [4]     JSR   Math_FindRMS
  0015 7c0000       [3]     STD   DEM_IRMS
   83:    CreateMenu(LCDState);
  0018 fc0000       [3]     LDD   LCDState
  001b 060000       [3]     JMP   CreateMenu
   84:  }
   85:  
   86:  // ----------------------------------------
   87:  // TIE5_ISR
   88:  // 
   89:  // The interrupt service routine for Timer Channel 5.
   90:  // It will determine if a pushbutton has been pressed and will
   91:  // allow for the button event to be handled.
   92:  // Input:
   93:  //   
   94:  // Output:
   95:  //   none
   96:  // Conditions:
   97:  //  none
   98:  void interrupt 13 TIE5_ISR(void)
   99:  {
*** EVALUATION ***

Function: TIE5_ISR
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\HMI.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\HMI.c.o" -WmsgSd1106 -WmsgSd5703

  100:    TFLG1_C5F = 1; // Clear flag to say it was done.  
  0000 4c0020       [4]     BSET  _TFLG1,#32
  101:    //OS_ISREnter();
  102:    
  103:    Buttons_Get(&PBState); 
  0003 cc0000       [2]     LDD   #PBState
  0006 160000       [4]     JSR   Buttons_Get
  104:    
  105:    if (PBState != PrevPBState)
  0009 fc0000       [3]     LDD   PBState
  000c bc0000       [3]     CPD   PrevPBState
  000f 2712         [3/1]   BEQ   *+20 ;abs = 0023
  106:    {
  107:      HandleButtonPress(PBState, LCDState);
  0011 3b           [2]     PSHD  
  0012 fc0000       [3]     LDD   LCDState
  0015 160000       [4]     JSR   HandleButtonPress
  0018 3a           [3]     PULD  
  108:      Clock_Interval = 0;
  0019 c7           [1]     CLRB  
  001a 87           [1]     CLRA  
  001b 7c0000       [3]     STD   Clock_Interval:2
  001e 7c0000       [3]     STD   Clock_Interval
  109:    }
  0021 2018         [3]     BRA   *+26 ;abs = 003b
  110:    else if (PBState == ButtonIdle && Clock_Interval >= 15) // 15 seconds
  0023 046415       [3]     TBNE  D,*+24 ;abs = 003b
  0026 fc0000       [3]     LDD   Clock_Interval
  0029 2608         [3/1]   BNE   *+10 ;abs = 0033
  002b fc0000       [3]     LDD   Clock_Interval:2
  002e 8c000f       [2]     CPD   #15
  0031 2508         [3/1]   BCS   *+10 ;abs = 003b
  111:    {
  112:      LCD_DisplayOff();
  0033 160000       [4]     JSR   LCD_DisplayOff
  113:      LCDState = Dormant;
  0036 c7           [1]     CLRB  
  0037 87           [1]     CLRA  
  0038 7c0000       [3]     STD   LCDState
  114:    }
  115:    PrevPBState = PBState;
  003b fc0000       [3]     LDD   PBState
  003e 7c0000       [3]     STD   PrevPBState
  116:    
  117:    Timer_Enable(TIMER_Ch6, bFALSE);
  0041 c606         [1]     LDAB  #6
  0043 87           [1]     CLRA  
  0044 3b           [2]     PSHD  
  0045 c7           [1]     CLRB  
  0046 160000       [4]     JSR   Timer_Enable
  0049 3a           [3]     PULD  
  118:    //OS_ISRExit();
  119:  }
  004a 0b           [8]     RTI   
  120:  
  121:  // ----------------------------------------
  122:  // CreateMenu
  123:  // 
  124:  // Creates the menu to display on the LCD
  125:  // Input:
  126:  //   menu is the state to display on the LCD e.g. DefaultMenu
  127:  // Output:
  128:  //   none
  129:  // Conditions:
  130:  //   LCD and HMI have been setup
  131:  void CreateMenu(TLCDState menu)
  132:  {
*** EVALUATION ***

Function: CreateMenu
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\HMI.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\HMI.c.o" -WmsgSd1106 -WmsgSd5703

  0000 3b           [2]     PSHD  
  133:    //INT16 voltage, current;
  134:    
  135:    LCD_Clear();
  0001 160000       [4]     JSR   LCD_Clear
  136:    
  137:    LCDState = menu;
  0004 ec80         [3]     LDD   0,SP
  0006 7c0000       [3]     STD   LCDState
  138:    
  139:    switch(menu)
  0009 160000       [4]     JSR   _CASE_CHECKED
  000c 0005         DC.W  5
  000e 0000         DC.W  CreateMenu:0x0216
  0010 0000         DC.W  CreateMenu:0x001a
  0012 0000         DC.W  CreateMenu:0x0055
  0014 0000         DC.W  CreateMenu:0x00bb
  0016 0000         DC.W  CreateMenu:0x0124
  0018 0000         DC.W  CreateMenu:0x019f
  140:    {
  141:      case Dormant:
  142:        LCD_SetLine(0);
  001a c7           [1]     CLRB  
  001b 160000       [4]     JSR   LCD_SetLine
  143:        LCD_OutString("                ");
  001e cc0000       [2]     LDD   #"                "
  0021 160000       [4]     JSR   CreateMenu:0x0223
  144:        LCD_SetLine(1);
  145:        LCD_OutString("                ");
  0024 cc0000       [2]     LDD   #"                "
  0027 160000       [4]     JSR   CreateMenu:0x023b
  146:        LCD_SetLine(2);
  147:        LCD_OutString("                ");
  002a cc0000       [2]     LDD   #"                "
  002d 160000       [4]     JSR   LCD_OutString
  148:        LCD_SetLine(3);
  0030 160000       [4]     JSR   CreateMenu:0x0253
  149:        LCD_OutString("                ");
  0033 cc0000       [2]     LDD   #"                "
  0036 160000       [4]     JSR   LCD_OutString
  150:        LCD_SetLine(4);
  0039 c604         [1]     LDAB  #4
  003b 160000       [4]     JSR   LCD_SetLine
  151:        LCD_OutString("                ");
  003e cc0000       [2]     LDD   #"                "
  0041 160000       [4]     JSR   CreateMenu:0x022b
  152:        LCD_SetLine(5);
  153:        LCD_OutString("                ");
  0044 cc0000       [2]     LDD   #"                "
  0047 160000       [4]     JSR   CreateMenu:0x0243
  154:        LCD_SetLine(6);
  155:        LCD_OutString("                ");
  004a cc0000       [2]     LDD   #"                "
  004d 160000       [4]     JSR   CreateMenu:0x0233
  156:        LCD_SetLine(7);
  157:        LCD_OutString("                ");
  0050 cc0000       [2]     LDD   #"                "
  158:      break;
  0053 2064         [3]     BRA   *+102 ;abs = 00b9
  159:      
  160:      case MeteringTime:
  161:        
  162:        LCD_SetLine(0);
  0055 c7           [1]     CLRB  
  0056 160000       [4]     JSR   LCD_SetLine
  163:        LCD_OutString("$--------------$");
  0059 cc0000       [2]     LDD   #"$--------------$"
  005c 160000       [4]     JSR   CreateMenu:0x0223
  164:        LCD_SetLine(1);
  165:        LCD_OutString("|Metering Time |");
  005f cc0000       [2]     LDD   #"|Metering Time |"
  0062 160000       [4]     JSR   LCD_OutString
  166:        
  167:        if (Clock_Days <= MAX_DAYS)
  0065 f60000       [3]     LDAB  Clock_Days
  0068 c163         [1]     CMPB  #99
  006a 2229         [3/1]   BHI   *+43 ;abs = 0095
  168:        {
  169:          LCD_SetLine(2);
  006c c602         [1]     LDAB  #2
  006e 160000       [4]     JSR   LCD_SetLine
  170:          (void)LCD_OutChar(' ');
  0071 160000       [4]     JSR   CreateMenu:0x0258
  171:          LCD_OutInteger(Clock_Days);
  0074 f60000       [3]     LDAB  Clock_Days
  0077 87           [1]     CLRA  
  0078 160000       [4]     JSR   LCD_OutInteger
  172:          (void)LCD_OutChar(':');
  007b c63a         [1]     LDAB  #58
  007d 160000       [4]     JSR   LCD_OutChar
  173:          LCD_OutInteger(Clock_Hours);
  0080 f60000       [3]     LDAB  Clock_Hours
  0083 160000       [4]     JSR   CreateMenu:0x025d
  174:          (void)LCD_OutChar(':');
  175:          LCD_OutInteger(Clock_Minutes);
  0086 f60000       [3]     LDAB  Clock_Minutes
  0089 160000       [4]     JSR   CreateMenu:0x025d
  176:          (void)LCD_OutChar(':');
  177:          LCD_OutInteger((UINT16)Clock_Seconds);
  008c f60000       [3]     LDAB  Clock_Seconds
  008f 87           [1]     CLRA  
  0090 160000       [4]     JSR   LCD_OutInteger
  178:        }
  0093 2006         [3]     BRA   *+8 ;abs = 009b
  179:        else
  180:          LCD_OutString(" xx:xx:xx:xx  ");
  0095 cc0000       [2]     LDD   #" xx:xx:xx:xx  "
  0098 160000       [4]     JSR   LCD_OutString
  181:        
  182:        LCD_SetLine(3);
  009b 160000       [4]     JSR   CreateMenu:0x0253
  183:        LCD_OutString(" Tarrif:");
  009e cc0000       [2]     LDD   #" Tarrif:"
  00a1 160000       [4]     JSR   CreateMenu:0x0218
  184:        DEM_OutTarrif();
  185:        LCD_SetLine(4);
  186:        LCD_OutString("|              |");
  00a4 cc0000       [2]     LDD   #"|              |"
  00a7 160000       [4]     JSR   CreateMenu:0x022b
  187:        LCD_SetLine(5);
  188:        LCD_OutString("|              |");
  00aa cc0000       [2]     LDD   #"|              |"
  00ad 160000       [4]     JSR   CreateMenu:0x0243
  189:        LCD_SetLine(6);
  190:        LCD_OutString("|              |");
  00b0 cc0000       [2]     LDD   #"|              |"
  00b3 160000       [4]     JSR   CreateMenu:0x0233
  191:        LCD_SetLine(7);
  192:        LCD_OutString("$------CYC-----$");
  00b6 cc0000       [2]     LDD   #"$------CYC-----$"
  193:      break;
  00b9 2067         [3]     BRA   *+105 ;abs = 0122
  194:      
  195:      case AveragePower:
  196:        LCD_SetLine(0);
  00bb c7           [1]     CLRB  
  00bc 160000       [4]     JSR   LCD_SetLine
  197:        LCD_OutString("$--------------$");
  00bf cc0000       [2]     LDD   #"$--------------$"
  00c2 160000       [4]     JSR   CreateMenu:0x0223
  198:        LCD_SetLine(1);
  199:        LCD_OutString("|   Ave Power  |");
  00c5 cc0000       [2]     LDD   #"|   Ave Power  |"
  00c8 160000       [4]     JSR   CreateMenu:0x023b
  200:        LCD_SetLine(2);
  201:        (void)LCD_OutChar(' ');
  00cb 160000       [4]     JSR   CreateMenu:0x0258
  202:        //voltage = Math_ConvertADCValue(Analog_Input[Ch1].Value.l);
  203:        //current = Math_ConvertADCValue(Analog_Input[Ch2].Value.l);
  204:        //DEM_Average_Power.l = Math_FindPower(voltage, current);
  205:        LCD_OutInteger(Math_FromQN(DEM_Average_Power.l, qLeft, PowerBase));
  00ce fc0000       [3]     LDD   DEM_Average_Power:2
  00d1 3b           [2]     PSHD  
  00d2 fc0000       [3]     LDD   DEM_Average_Power
  00d5 3b           [2]     PSHD  
  00d6 c7           [1]     CLRB  
  00d7 87           [1]     CLRA  
  00d8 3b           [2]     PSHD  
  00d9 c606         [1]     LDAB  #6
  00db 160000       [4]     JSR   Math_FromQN
  00de 1b86         [2]     LEAS  6,SP
  00e0 160000       [4]     JSR   CreateMenu:0x024b
  206:        (void)LCD_OutChar('.');
  207:        LCD_OutInteger(Math_FromQN(DEM_Average_Power.l, qRight, PowerBase));
  00e3 fc0000       [3]     LDD   DEM_Average_Power:2
  00e6 3b           [2]     PSHD  
  00e7 fc0000       [3]     LDD   DEM_Average_Power
  00ea 3b           [2]     PSHD  
  00eb c601         [1]     LDAB  #1
  00ed 87           [1]     CLRA  
  00ee 3b           [2]     PSHD  
  00ef c606         [1]     LDAB  #6
  00f1 160000       [4]     JSR   Math_FromQN
  00f4 1b86         [2]     LEAS  6,SP
  00f6 160000       [4]     JSR   LCD_OutInteger
  208:        LCD_OutString("kW");
  00f9 cc0000       [2]     LDD   #"kW"
  00fc 160000       [4]     JSR   LCD_OutString
  209:        LCD_SetLine(3);
  00ff 160000       [4]     JSR   CreateMenu:0x0253
  210:        LCD_OutString(" Tarrif:");
  0102 cc0000       [2]     LDD   #" Tarrif:"
  0105 160000       [4]     JSR   CreateMenu:0x0218
  211:        DEM_OutTarrif();
  212:        //LCD_OutInteger(tarrifL);
  213:        //(void)LCD_OutChar('.');
  214:        //LCD_OutInteger(tarrifR);
  215:        LCD_SetLine(4);
  216:        LCD_OutString("|              |");
  0108 cc0000       [2]     LDD   #"|              |"
  010b 160000       [4]     JSR   CreateMenu:0x022b
  217:        LCD_SetLine(5);
  218:        LCD_OutString("|              |");
  010e cc0000       [2]     LDD   #"|              |"
  0111 160000       [4]     JSR   LCD_OutString
  219:        LCD_SetLine(6);
  0114 c606         [1]     LDAB  #6
  0116 160000       [4]     JSR   LCD_SetLine
  220:        LCD_OutString("|              |");
  0119 cc0000       [2]     LDD   #"|              |"
  011c 160000       [4]     JSR   CreateMenu:0x0233
  221:        LCD_SetLine(7);
  222:        LCD_OutString("$------CYC-----$");
  011f cc0000       [2]     LDD   #"$------CYC-----$"
  223:      break;
  0122 2079         [3]     BRA   *+123 ;abs = 019d
  224:      
  225:      case TotalEnergy:
  226:        LCD_SetLine(0);
  0124 c7           [1]     CLRB  
  0125 160000       [4]     JSR   LCD_SetLine
  227:        LCD_OutString("$--------------$");
  0128 cc0000       [2]     LDD   #"$--------------$"
  012b 160000       [4]     JSR   CreateMenu:0x0223
  228:        LCD_SetLine(1);
  229:        LCD_OutString("| Total Energy |");
  012e cc0000       [2]     LDD   #"| Total Energy |"
  0131 160000       [4]     JSR   CreateMenu:0x023b
  230:        
  231:        LCD_SetLine(2);
  232:        if (DEM_Total_Energy.l <= MAX_ENERGY)
  0134 fc0000       [3]     LDD   DEM_Total_Energy
  0137 8c000f       [2]     CPD   #15
  013a 250a         [3/1]   BCS   *+12 ;abs = 0146
  013c 263b         [3/1]   BNE   *+61 ;abs = 0179
  013e fc0000       [3]     LDD   DEM_Total_Energy:2
  0141 8c3e58       [2]     CPD   #15960
  0144 2233         [3/1]   BHI   *+53 ;abs = 0179
  233:        {
  234:          (void)LCD_OutChar(' ');
  0146 160000       [4]     JSR   CreateMenu:0x0258
  235:          LCD_OutInteger( Math_FromQN(DEM_Total_Energy.l, qLeft, EnergyBase) );
  0149 fc0000       [3]     LDD   DEM_Total_Energy:2
  014c 3b           [2]     PSHD  
  014d fc0000       [3]     LDD   DEM_Total_Energy
  0150 3b           [2]     PSHD  
  0151 c7           [1]     CLRB  
  0152 87           [1]     CLRA  
  0153 3b           [2]     PSHD  
  0154 c609         [1]     LDAB  #9
  0156 160000       [4]     JSR   Math_FromQN
  0159 1b86         [2]     LEAS  6,SP
  015b 160000       [4]     JSR   CreateMenu:0x024b
  236:          (void)LCD_OutChar('.');
  237:          LCD_OutInteger( Math_FromQN(DEM_Total_Energy.l, qRight, EnergyBase) );
  015e fc0000       [3]     LDD   DEM_Total_Energy:2
  0161 3b           [2]     PSHD  
  0162 fc0000       [3]     LDD   DEM_Total_Energy
  0165 3b           [2]     PSHD  
  0166 c601         [1]     LDAB  #1
  0168 87           [1]     CLRA  
  0169 3b           [2]     PSHD  
  016a c609         [1]     LDAB  #9
  016c 160000       [4]     JSR   Math_FromQN
  016f 1b86         [2]     LEAS  6,SP
  0171 160000       [4]     JSR   LCD_OutInteger
  238:          LCD_OutString("kWh");
  0174 cc0000       [2]     LDD   #"kWh"
  239:        } 
  0177 2003         [3]     BRA   *+5 ;abs = 017c
  240:        else
  241:          LCD_OutString(" xxx.xxx      ");
  0179 cc0000       [2]     LDD   #" xxx.xxx      "
  017c 160000       [4]     JSR   LCD_OutString
  242:        
  243:        LCD_SetLine(3);
  017f 160000       [4]     JSR   CreateMenu:0x0253
  244:        LCD_OutString(" Tarrif:");
  0182 cc0000       [2]     LDD   #" Tarrif:"
  0185 160000       [4]     JSR   CreateMenu:0x0218
  245:        DEM_OutTarrif();
  246:        LCD_SetLine(4);
  247:        LCD_OutString("|              |");
  0188 cc0000       [2]     LDD   #"|              |"
  018b 160000       [4]     JSR   CreateMenu:0x022b
  248:        LCD_SetLine(5);
  249:        LCD_OutString("|              |");
  018e cc0000       [2]     LDD   #"|              |"
  0191 160000       [4]     JSR   CreateMenu:0x0243
  250:        LCD_SetLine(6);
  251:        LCD_OutString("|              |");
  0194 cc0000       [2]     LDD   #"|              |"
  0197 160000       [4]     JSR   CreateMenu:0x0233
  252:        LCD_SetLine(7);
  253:        LCD_OutString("$------CYC-----$");
  019a cc0000       [2]     LDD   #"$------CYC-----$"
  254:      break;
  019d 2074         [3]     BRA   *+118 ;abs = 0213
  255:      
  256:      case TotalCost:
  257:        LCD_SetLine(0);
  019f c7           [1]     CLRB  
  01a0 160000       [4]     JSR   LCD_SetLine
  258:        LCD_OutString("$--------------$");
  01a3 cc0000       [2]     LDD   #"$--------------$"
  01a6 077b         [4]     BSR   *+125 ;abs = 0223
  259:        LCD_SetLine(1);
  260:        LCD_OutString("|  Total Cost  |");
  01a8 cc0000       [2]     LDD   #"|  Total Cost  |"
  01ab 160000       [4]     JSR   CreateMenu:0x023b
  261:        LCD_SetLine(2);
  262:        
  263:        if (DEM_Total_Cost <= MAX_COST)
  01ae fc0000       [3]     LDD   DEM_Total_Cost
  01b1 8c007a       [2]     CPD   #122
  01b4 250a         [3/1]   BCS   *+12 ;abs = 01c0
  01b6 263c         [3/1]   BNE   *+62 ;abs = 01f4
  01b8 fc0000       [3]     LDD   DEM_Total_Cost:2
  01bb 8c11f8       [2]     CPD   #4600
  01be 2234         [3/1]   BHI   *+54 ;abs = 01f4
  264:        {
  265:          (void)LCD_OutChar(' ');
  01c0 160000       [4]     JSR   CreateMenu:0x0258
  266:          (void)LCD_OutChar('$');
  01c3 c624         [1]     LDAB  #36
  01c5 160000       [4]     JSR   LCD_OutChar
  267:          LCD_OutInteger( Math_FromQN(DEM_Total_Cost, qLeft, CostBase) );
  01c8 fc0000       [3]     LDD   DEM_Total_Cost:2
  01cb 3b           [2]     PSHD  
  01cc fc0000       [3]     LDD   DEM_Total_Cost
  01cf 3b           [2]     PSHD  
  01d0 c7           [1]     CLRB  
  01d1 87           [1]     CLRA  
  01d2 3b           [2]     PSHD  
  01d3 c60a         [1]     LDAB  #10
  01d5 160000       [4]     JSR   Math_FromQN
  01d8 1b86         [2]     LEAS  6,SP
  01da 076f         [4]     BSR   *+113 ;abs = 024b
  268:          (void)LCD_OutChar('.');
  269:          LCD_OutInteger( Math_FromQN(DEM_Total_Cost, qRight, CostBase) );
  01dc fc0000       [3]     LDD   DEM_Total_Cost:2
  01df 3b           [2]     PSHD  
  01e0 fc0000       [3]     LDD   DEM_Total_Cost
  01e3 3b           [2]     PSHD  
  01e4 c601         [1]     LDAB  #1
  01e6 87           [1]     CLRA  
  01e7 3b           [2]     PSHD  
  01e8 c60a         [1]     LDAB  #10
  01ea 160000       [4]     JSR   Math_FromQN
  01ed 1b86         [2]     LEAS  6,SP
  01ef 160000       [4]     JSR   LCD_OutInteger
  270:        } 
  01f2 2006         [3]     BRA   *+8 ;abs = 01fa
  271:        else
  272:        {
  273:          LCD_OutString(" xxxx.xx      ");
  01f4 cc0000       [2]     LDD   #" xxxx.xx      "
  01f7 160000       [4]     JSR   LCD_OutString
  274:        }
  275:        LCD_SetLine(3);
  01fa 0757         [4]     BSR   *+89 ;abs = 0253
  276:        LCD_OutString(" Tarrif:");
  01fc cc0000       [2]     LDD   #" Tarrif:"
  01ff 0717         [4]     BSR   *+25 ;abs = 0218
  277:        DEM_OutTarrif();
  278:        LCD_SetLine(4);
  279:        LCD_OutString("|              |");
  0201 cc0000       [2]     LDD   #"|              |"
  0204 0725         [4]     BSR   *+39 ;abs = 022b
  280:        LCD_SetLine(5);
  281:        LCD_OutString("|              |");
  0206 cc0000       [2]     LDD   #"|              |"
  0209 0738         [4]     BSR   *+58 ;abs = 0243
  282:        LCD_SetLine(6);
  283:        LCD_OutString("|              |");
  020b cc0000       [2]     LDD   #"|              |"
  020e 0723         [4]     BSR   *+37 ;abs = 0233
  284:        LCD_SetLine(7);
  285:        LCD_OutString("$------CYC-----$");
  0210 cc0000       [2]     LDD   #"$------CYC-----$"
  0213 160000       [4]     JSR   LCD_OutString
  286:      break;
  287:    }
  288:  }
  0216 3a           [3]     PULD  
  0217 3d           [5]     RTS   
  0218 160000       [4]     JSR   LCD_OutString
  021b 160000       [4]     JSR   DEM_OutTarrif
  021e c604         [1]     LDAB  #4
  0220 060000       [3]     JMP   LCD_SetLine
  0223 160000       [4]     JSR   LCD_OutString
  0226 c601         [1]     LDAB  #1
  0228 060000       [3]     JMP   LCD_SetLine
  022b 160000       [4]     JSR   LCD_OutString
  022e c605         [1]     LDAB  #5
  0230 060000       [3]     JMP   LCD_SetLine
  0233 160000       [4]     JSR   LCD_OutString
  0236 c607         [1]     LDAB  #7
  0238 060000       [3]     JMP   LCD_SetLine
  023b 160000       [4]     JSR   LCD_OutString
  023e c602         [1]     LDAB  #2
  0240 060000       [3]     JMP   LCD_SetLine
  0243 160000       [4]     JSR   LCD_OutString
  0246 c606         [1]     LDAB  #6
  0248 060000       [3]     JMP   LCD_SetLine
  024b 160000       [4]     JSR   LCD_OutInteger
  024e c62e         [1]     LDAB  #46
  0250 060000       [3]     JMP   LCD_OutChar
  0253 c603         [1]     LDAB  #3
  0255 060000       [3]     JMP   LCD_SetLine
  0258 c620         [1]     LDAB  #32
  025a 060000       [3]     JMP   LCD_OutChar
  025d 87           [1]     CLRA  
  025e 160000       [4]     JSR   LCD_OutInteger
  0261 c63a         [1]     LDAB  #58
  0263 060000       [3]     JMP   LCD_OutChar
  289:  
  290:  // ----------------------------------------
  291:  // HandleButtonPress
  292:  // 
  293:  // Determines which functions to call/what to do when a button is pressed
  294:  // Input:
  295:  //   PBState is the push button state that was most recent
  296:  //   LCDState is the menu currently displayed on the LCD
  297:  // Output:
  298:  //   none
  299:  // Conditions:
  300:  //   LCD and Buttons have been setup
  301:  void HandleButtonPress(TButtonInputs PBState, TLCDState LCDState)
  302:  {
*** EVALUATION ***

Function: HandleButtonPress
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\HMI.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\HMI.c.o" -WmsgSd1106 -WmsgSd5703

  303:    switch(LCDState)
  0000 160000       [4]     JSR   _CASE_CHECKED_BYTE
  0003 05           DC.B  5
  0004 3d           DC.B  61
  0005 05           DC.B  5
  0006 1b           DC.B  27
  0007 23           DC.B  35
  0008 2b           DC.B  43
  0009 33           DC.B  51
  304:    {
  305:      case Dormant:
  306:        switch(PBState)
  000a ec82         [3]     LDD   2,SP
  000c 160000       [4]     JSR   _CASE_SEARCH_8_BYTE
  000f 80           DC.B  128
  0010 33           DC.B  51
  0011 04           DC.B  4
  0012 0a           DC.B  10
  0013 08           DC.B  8
  0014 08           DC.B  8
  0015 10           DC.B  16
  0016 06           DC.B  6
  0017 20           DC.B  32
  0018 04           DC.B  4
  0019 80           DC.B  128
  001a 02           DC.B  2
  307:        {
  308:          case Button0:
  309:          case Button1:
  310:          case Button2:
  311:          case Button3:
  312:          case Button4:
  313:            LCD_DisplayOn();
  001b 160000       [4]     JSR   LCD_DisplayOn
  314:            CreateMenu(MeteringTime);
  315:          break;
  001e 201c         [3]     BRA   *+30 ;abs = 003c
  316:        }
  317:      break;
  318:      
  319:      case MeteringTime:
  320:        switch(PBState)
  0020 0721         [4]     BSR   *+35 ;abs = 0043
  0022 261e         [3/1]   BNE   *+32 ;abs = 0042
  321:        {
  322:          case Button2:
  323:            CreateMenu(AveragePower);
  0024 c602         [1]     LDAB  #2
  324:          break;
  0026 2016         [3]     BRA   *+24 ;abs = 003e
  325:        }
  326:      break;
  327:      
  328:      case AveragePower:
  329:        switch(PBState)
  0028 0719         [4]     BSR   *+27 ;abs = 0043
  002a 2616         [3/1]   BNE   *+24 ;abs = 0042
  330:        {
  331:          case Button2:
  332:            CreateMenu(TotalEnergy);  
  002c c603         [1]     LDAB  #3
  333:          break;
  002e 200e         [3]     BRA   *+16 ;abs = 003e
  334:        }
  335:      break;
  336:      
  337:      case TotalEnergy:
  338:        switch(PBState)
  0030 0711         [4]     BSR   *+19 ;abs = 0043
  0032 260e         [3/1]   BNE   *+16 ;abs = 0042
  339:        {
  340:          case Button2:
  341:            CreateMenu(TotalCost);
  0034 c604         [1]     LDAB  #4
  342:          break;
  0036 2006         [3]     BRA   *+8 ;abs = 003e
  343:        }
  344:      break;
  345:      
  346:      case TotalCost:
  347:        switch(PBState)
  0038 0709         [4]     BSR   *+11 ;abs = 0043
  003a 2606         [3/1]   BNE   *+8 ;abs = 0042
  348:        {
  349:          case Button2:
  350:            CreateMenu(MeteringTime);
  003c c601         [1]     LDAB  #1
  003e 87           [1]     CLRA  
  003f 160000       [4]     JSR   CreateMenu
  351:          break;
  352:        }
  353:      break;
  354:    }
  355:    
  356:  }
  0042 3d           [5]     RTS   
  0043 ec84         [3]     LDD   4,SP
  0045 8c0010       [2]     CPD   #16
  0048 3d           [5]     RTS   
  357:  
