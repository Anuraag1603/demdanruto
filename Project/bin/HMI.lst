*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.41 Build 10203, Jul 23 2010

    1:  // ----------------------------------------
    2:  // Filename: HMI.c
    3:  // Description: Lab 5
    4:  //  Implements the HMI to control the LCD and menu system
    5:  //  backlighting, display and setup
    6:  // Author: Danny Sok
    7:  //         Edward Khou
    8:  // Date Created: 20-10-2011
    9:  // Date Last Modified: 2-11-2011
   10:  
   11:  #include "HMI.h"
   12:  
   13:  // Position of the cursors;
   14:  static TButtonInputs PBState, PrevPBState;
   15:  static TLCDState LCDState;
   16:  
   17:  
   18:  // ----------------------------------------
   19:  // HMI_Setup
   20:  // 
   21:  // Sets up the HMI
   22:  // Input:
   23:  //   
   24:  // Output:
   25:  //   none
   26:  // Conditions:
   27:  //  none
   28:  void HMI_Setup(void)
   29:  {
*** EVALUATION ***

Function: HMI_Setup
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\HMI.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\Full_Chip_Simulation\ObjectCode\HMI.c.o" -WmsgSd1106 -WmsgSd5703

   30:    // Port K - Push Buttons
   31:    DDRK_BIT2 = 0;    // 0: Input, PK2
  0000 4d0004       [4]     BCLR  _DDRK,#4
   32:    DDRK_BIT3 = 0;    // 0: Input, PK3
  0003 4d0008       [4]     BCLR  _DDRK,#8
   33:    DDRK_BIT4 = 0;    // 0: Input, PK4
  0006 4d0010       [4]     BCLR  _DDRK,#16
   34:    DDRK_BIT5 = 0;    // 0: Input, PK5
  0009 4d0020       [4]     BCLR  _DDRK,#32
   35:    DDRK_BIT7 = 0;    // 0: Input, PK7
  000c 4d0080       [4]     BCLR  _DDRK,#128
   36:    
   37:    // Port A: LCD Display
   38:    DDRA_BIT0 = 1;    // 1: Output, PA0
  000f 4c0001       [4]     BSET  _DDRAB,#1
   39:    DDRA_BIT1 = 1;    // 1: Output, PA1
  0012 4c0002       [4]     BSET  _DDRAB,#2
   40:    DDRA_BIT2 = 1;    // 1: Output, PA2
  0015 4c0004       [4]     BSET  _DDRAB,#4
   41:    DDRA_BIT3 = 1;    // 1: Output, PA3
  0018 4c0008       [4]     BSET  _DDRAB,#8
   42:    DDRA_BIT4 = 1;    // 1: Output, PA4
  001b 4c0010       [4]     BSET  _DDRAB,#16
   43:    DDRA_BIT5 = 1;    // 1: Output, PA5
  001e 4c0020       [4]     BSET  _DDRAB,#32
   44:    DDRA_BIT6 = 1;    // 1: Output, PA6
  0021 4c0040       [4]     BSET  _DDRAB,#64
   45:    DDRA_BIT7 = 1;    // 1: Output, PA7
  0024 4c0080       [4]     BSET  _DDRAB,#128
   46:    
   47:    // Port B: LCD Control
   48:    DDRB_BIT0 = 1;    // 1: Output, PB0
  0027 4c0001       [4]     BSET  _DDRAB:1,#1
   49:    DDRB_BIT1 = 1;    // 1: Output, PB1
  002a 4c0002       [4]     BSET  _DDRAB:1,#2
   50:    DDRB_BIT2 = 1;    // 1: Output, PB2
  002d 4c0004       [4]     BSET  _DDRAB:1,#4
   51:    DDRB_BIT3 = 1;    // 1: Output, PB3
  0030 4c0008       [4]     BSET  _DDRAB:1,#8
   52:    DDRB_BIT4 = 1;    // 1: Output, PB4
  0033 4c0010       [4]     BSET  _DDRAB:1,#16
   53:    DDRB_BIT5 = 1;    // 1: Output, PB5
  0036 4c0020       [4]     BSET  _DDRAB:1,#32
   54:    DDRB_BIT6 = 1;    // 1: Output, PB6
  0039 4c0040       [4]     BSET  _DDRAB:1,#64
   55:    DDRB_BIT7 = 1;    // 1: Output, PB7
  003c 4c0080       [4]     BSET  _DDRAB:1,#128
   56:    
   57:    LCD_Setup();
  003f 160000       [4]     JSR   LCD_Setup
   58:    DEM_Setup();
  0042 160000       [4]     JSR   DEM_Setup
   59:      
   60:    LCDState = MeteringTime;
  0045 c601         [1]     LDAB  #1
  0047 87           [1]     CLRA  
  0048 7c0000       [3]     STD   LCDState
   61:    CreateMenu(MeteringTime);
  004b 160000       [4]     JSR   CreateMenu
   62:    
   63:    Clock_Interval      = 0;
  004e c7           [1]     CLRB  
  004f 87           [1]     CLRA  
  0050 7c0000       [3]     STD   Clock_Interval:2
  0053 7c0000       [3]     STD   Clock_Interval
   64:  }
  0056 3d           [5]     RTS   
   65:  
   66:  // ----------------------------------------
   67:  // HMI_Update
   68:  // 
   69:  // Updates the LCD display with the new values of Power, Energy, Cost and Time
   70:  // Input:
   71:  //   none
   72:  // Output:
   73:  //   none
   74:  // Conditions:
   75:  //   none
   76:  void HMI_Update(void)
   77:  {
*** EVALUATION ***

Function: HMI_Update
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\HMI.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\Full_Chip_Simulation\ObjectCode\HMI.c.o" -WmsgSd1106 -WmsgSd5703

   78:    UINT16 tarrifL = Math_FromQN(DEM_Tarrif, qLeft, DefaultBase);
  0000 fc0000       [3]     LDD   DEM_Tarrif
  0003 6caa         [2]     STD   6,-SP
  0005 c7           [1]     CLRB  
  0006 87           [1]     CLRA  
  0007 3b           [2]     PSHD  
  0008 3b           [2]     PSHD  
  0009 c603         [1]     LDAB  #3
  000b 160000       [4]     JSR   Math_FromQN
  000e 1b86         [2]     LEAS  6,SP
  0010 6c82         [2]     STD   2,SP
   79:    UINT16 tarrifR = Math_FromQN(DEM_Tarrif, qRight, DefaultBase);
  0012 fc0000       [3]     LDD   DEM_Tarrif
  0015 3b           [2]     PSHD  
  0016 c7           [1]     CLRB  
  0017 87           [1]     CLRA  
  0018 3b           [2]     PSHD  
  0019 52           [1]     INCB  
  001a 3b           [2]     PSHD  
  001b c603         [1]     LDAB  #3
  001d 160000       [4]     JSR   Math_FromQN
  0020 6ca5         [2]     STD   6,+SP
   80:    //INT16 voltage, current;
   81:    DEM_SetTarrif();
  0022 160000       [4]     JSR   DEM_SetTarrif
   82:    Math_FindCost();
  0025 160000       [4]     JSR   Math_FindCost
   83:    
   84:    DEM_VRMS.l = Math_FindRMS(DEM_Average_Power.l);
  0028 fc0000       [3]     LDD   DEM_Average_Power
  002b 160000       [4]     JSR   Math_FindRMS
  002e 7c0000       [3]     STD   DEM_VRMS
   85:    DEM_IRMS.l = Math_FindRMS(Analog_Input[Ch2].Value.l);
  0031 fc0000       [3]     LDD   Analog_Input:10
  0034 160000       [4]     JSR   Math_FindRMS
  0037 7c0000       [3]     STD   DEM_IRMS
   86:    
   87:    switch(LCDState)
  003a fc0000       [3]     LDD   LCDState
  003d 830001       [2]     SUBD  #1
  0040 160000       [4]     JSR   _CASE_CHECKED
  0043 0004         DC.W  4
  0045 0000         DC.W  HMI_Update:0x018c
  0047 0000         DC.W  HMI_Update:0x004f
  0049 0000         DC.W  HMI_Update:0x0098
  004b 0000         DC.W  HMI_Update:0x00dc
  004d 0000         DC.W  HMI_Update:0x0136
   88:    {
   89:      case MeteringTime:
   90:        if (Clock_Days <= MAX_DAYS)
  004f f60000       [3]     LDAB  Clock_Days
  0052 c163         [1]     CMPB  #99
  0054 223c         [3/1]   BHI   *+62 ;abs = 0092
   91:        {
   92:          LCD_ClearLine(2);
  0056 160000       [4]     JSR   HMI_Update:0x01a1
   93:          LCD_SetLine(2);
   94:          (void)LCD_OutChar(' ');
  0059 160000       [4]     JSR   HMI_Update:0x01c4
   95:          LCD_OutInteger(Clock_Days);
  005c f60000       [3]     LDAB  Clock_Days
  005f 87           [1]     CLRA  
  0060 160000       [4]     JSR   LCD_OutInteger
   96:          (void)LCD_OutChar(':');
  0063 c63a         [1]     LDAB  #58
  0065 160000       [4]     JSR   LCD_OutChar
   97:          LCD_OutInteger(Clock_Hours);
  0068 f60000       [3]     LDAB  Clock_Hours
  006b 160000       [4]     JSR   HMI_Update:0x01bb
   98:          (void)LCD_OutChar(':');
   99:          LCD_OutInteger(Clock_Minutes);
  006e f60000       [3]     LDAB  Clock_Minutes
  0071 160000       [4]     JSR   HMI_Update:0x01bb
  100:          (void)LCD_OutChar(':');
  101:          LCD_OutInteger((UINT16)Clock_Seconds);
  0074 f60000       [3]     LDAB  Clock_Seconds
  0077 87           [1]     CLRA  
  0078 160000       [4]     JSR   LCD_OutInteger
  102:          
  103:          LCD_ClearLine(3);
  007b c603         [1]     LDAB  #3
  007d 160000       [4]     JSR   HMI_Update:0x01b3
  104:          LCD_SetLine(3);
  105:          LCD_OutString(" Tarrif:");
  0080 cc0000       [2]     LDD   #" Tarrif:"
  0083 160000       [4]     JSR   LCD_OutString
  106:          LCD_OutInteger(tarrifL);
  0086 ec82         [3]     LDD   2,SP
  0088 160000       [4]     JSR   HMI_Update:0x01ab
  107:          (void)LCD_OutChar('.');
  108:          LCD_OutInteger(tarrifR);
  008b ec80         [3]     LDD   0,SP
  008d 160000       [4]     JSR   LCD_OutInteger
  109:        }
  0090 2048         [3]     BRA   *+74 ;abs = 00da
  110:        else
  111:          LCD_OutString(" xx:xx:xx:xx  ");
  0092 cc0000       [2]     LDD   #" xx:xx:xx:xx  "
  0095 060000       [3]     JMP   HMI_Update:0x0189
  112:      break;
  113:      
  114:      case AveragePower:
  115:        LCD_ClearLine(2);
  0098 160000       [4]     JSR   HMI_Update:0x01a1
  116:        LCD_SetLine(2);
  117:        (void)LCD_OutChar(' ');
  009b 160000       [4]     JSR   HMI_Update:0x01c4
  118:        //voltage = Math_ConvertADCValue(Analog_Input[Ch1].Value.l);
  119:        //current = Math_ConvertADCValue(Analog_Input[Ch2].Value.l);
  120:        //DEM_Average_Power.l = Math_FindPower(voltage, current);
  121:        LCD_OutInteger(Math_FromQN(DEM_Average_Power.l, qLeft, DefaultBase << 1));
  009e fc0000       [3]     LDD   DEM_Average_Power
  00a1 160000       [4]     JSR   _ILSEXT
  00a4 3b           [2]     PSHD  
  00a5 34           [2]     PSHX  
  00a6 c7           [1]     CLRB  
  00a7 87           [1]     CLRA  
  00a8 3b           [2]     PSHD  
  00a9 c606         [1]     LDAB  #6
  00ab 160000       [4]     JSR   Math_FromQN
  00ae 1b86         [2]     LEAS  6,SP
  00b0 160000       [4]     JSR   HMI_Update:0x01ab
  122:        (void)LCD_OutChar('.');
  123:        LCD_OutInteger(Math_FromQN(DEM_Average_Power.l, qRight, DefaultBase << 1));
  00b3 fc0000       [3]     LDD   DEM_Average_Power
  00b6 160000       [4]     JSR   _ILSEXT
  00b9 3b           [2]     PSHD  
  00ba 34           [2]     PSHX  
  00bb c601         [1]     LDAB  #1
  00bd 87           [1]     CLRA  
  00be 3b           [2]     PSHD  
  00bf c606         [1]     LDAB  #6
  00c1 160000       [4]     JSR   Math_FromQN
  00c4 1b86         [2]     LEAS  6,SP
  00c6 160000       [4]     JSR   LCD_OutInteger
  124:        LCD_OutString("kW");
  00c9 cc0000       [2]     LDD   #"kW"
  00cc 160000       [4]     JSR   LCD_OutString
  125:        LCD_ClearLine(3);
  00cf c603         [1]     LDAB  #3
  00d1 160000       [4]     JSR   HMI_Update:0x01b3
  126:        LCD_SetLine(3);
  127:        LCD_OutString(" Tarrif:");
  00d4 cc0000       [2]     LDD   #" Tarrif:"
  00d7 160000       [4]     JSR   HMI_Update:0x018f
  128:        LCD_OutInteger(tarrifL);
  129:        (void)LCD_OutChar('.');
  130:        LCD_OutInteger(tarrifR);
  131:      break;
  00da 2053         [3]     BRA   *+85 ;abs = 012f
  132:      
  133:      case TotalEnergy:
  134:        LCD_ClearLine(2);
  00dc 160000       [4]     JSR   HMI_Update:0x01a1
  135:        LCD_SetLine(2);
  136:        if (DEM_Total_Energy.l <= MAX_ENERGY)
  00df fc0000       [3]     LDD   DEM_Total_Energy
  00e2 8c261b       [2]     CPD   #9755
  00e5 250a         [3/1]   BCS   *+12 ;abs = 00f1
  00e7 2648         [3/1]   BNE   *+74 ;abs = 0131
  00e9 fc0000       [3]     LDD   DEM_Total_Energy:2
  00ec 8c7e40       [2]     CPD   #32320
  00ef 2240         [3/1]   BHI   *+66 ;abs = 0131
  137:        {
  138:          (void)LCD_OutChar(' ');
  00f1 160000       [4]     JSR   HMI_Update:0x01c4
  139:          LCD_OutInteger( Math_FromQN(DEM_Total_Energy.l, qLeft, DefaultBase << 1) );
  00f4 fc0000       [3]     LDD   DEM_Total_Energy:2
  00f7 3b           [2]     PSHD  
  00f8 fc0000       [3]     LDD   DEM_Total_Energy
  00fb 3b           [2]     PSHD  
  00fc c7           [1]     CLRB  
  00fd 87           [1]     CLRA  
  00fe 3b           [2]     PSHD  
  00ff c606         [1]     LDAB  #6
  0101 160000       [4]     JSR   Math_FromQN
  0104 1b86         [2]     LEAS  6,SP
  0106 160000       [4]     JSR   HMI_Update:0x01ab
  140:          (void)LCD_OutChar('.');
  141:          LCD_OutInteger( Math_FromQN(DEM_Total_Energy.l, qRight, DefaultBase << 1) );
  0109 fc0000       [3]     LDD   DEM_Total_Energy:2
  010c 3b           [2]     PSHD  
  010d fc0000       [3]     LDD   DEM_Total_Energy
  0110 3b           [2]     PSHD  
  0111 c601         [1]     LDAB  #1
  0113 87           [1]     CLRA  
  0114 3b           [2]     PSHD  
  0115 c606         [1]     LDAB  #6
  0117 160000       [4]     JSR   Math_FromQN
  011a 1b86         [2]     LEAS  6,SP
  011c 160000       [4]     JSR   LCD_OutInteger
  142:          LCD_OutString("kWh");
  011f cc0000       [2]     LDD   #"kWh"
  0122 160000       [4]     JSR   LCD_OutString
  143:          LCD_ClearLine(3);
  0125 c603         [1]     LDAB  #3
  0127 160000       [4]     JSR   HMI_Update:0x01b3
  144:          LCD_SetLine(3);
  145:          LCD_OutString(" Tarrif:");
  012a cc0000       [2]     LDD   #" Tarrif:"
  012d 0760         [4]     BSR   *+98 ;abs = 018f
  146:          LCD_OutInteger(tarrifL);
  147:          (void)LCD_OutChar('.');
  148:          LCD_OutInteger(tarrifR);
  149:        } 
  012f 205b         [3]     BRA   *+93 ;abs = 018c
  150:        else
  151:          LCD_OutString(" xxx.xxx      ");
  0131 cc0000       [2]     LDD   #" xxx.xxx      "
  0134 2053         [3]     BRA   *+85 ;abs = 0189
  152:      break;
  153:      
  154:      case TotalCost:
  155:        LCD_ClearLine(2);
  0136 0769         [4]     BSR   *+107 ;abs = 01a1
  156:        LCD_SetLine(2);
  157:        if (DEM_Total_Cost <= MAX_COST)
  0138 fc0000       [3]     LDD   DEM_Total_Cost
  013b 8c007a       [2]     CPD   #122
  013e 250a         [3/1]   BCS   *+12 ;abs = 014a
  0140 2644         [3/1]   BNE   *+70 ;abs = 0186
  0142 fc0000       [3]     LDD   DEM_Total_Cost:2
  0145 8c11f8       [2]     CPD   #4600
  0148 223c         [3/1]   BHI   *+62 ;abs = 0186
  158:        {
  159:          (void)LCD_OutChar(' ');
  014a 0778         [4]     BSR   *+122 ;abs = 01c4
  160:          (void)LCD_OutChar('$');
  014c c624         [1]     LDAB  #36
  014e 160000       [4]     JSR   LCD_OutChar
  161:          LCD_OutInteger( Math_FromQN(DEM_Total_Cost, qLeft, DefaultBase) );
  0151 fc0000       [3]     LDD   DEM_Total_Cost:2
  0154 3b           [2]     PSHD  
  0155 fc0000       [3]     LDD   DEM_Total_Cost
  0158 3b           [2]     PSHD  
  0159 c7           [1]     CLRB  
  015a 87           [1]     CLRA  
  015b 3b           [2]     PSHD  
  015c c603         [1]     LDAB  #3
  015e 160000       [4]     JSR   Math_FromQN
  0161 1b86         [2]     LEAS  6,SP
  0163 0746         [4]     BSR   *+72 ;abs = 01ab
  162:          (void)LCD_OutChar('.');
  163:          LCD_OutInteger( Math_FromQN(DEM_Total_Cost, qRight, DefaultBase) );
  0165 fc0000       [3]     LDD   DEM_Total_Cost:2
  0168 3b           [2]     PSHD  
  0169 fc0000       [3]     LDD   DEM_Total_Cost
  016c 3b           [2]     PSHD  
  016d c601         [1]     LDAB  #1
  016f 87           [1]     CLRA  
  0170 3b           [2]     PSHD  
  0171 c603         [1]     LDAB  #3
  0173 160000       [4]     JSR   Math_FromQN
  0176 1b86         [2]     LEAS  6,SP
  0178 160000       [4]     JSR   LCD_OutInteger
  164:          
  165:          LCD_ClearLine(3);
  017b c603         [1]     LDAB  #3
  017d 0734         [4]     BSR   *+54 ;abs = 01b3
  166:          LCD_SetLine(3);
  167:          LCD_OutString(" Tarrif:");
  017f cc0000       [2]     LDD   #" Tarrif:"
  0182 070b         [4]     BSR   *+13 ;abs = 018f
  168:          LCD_OutInteger(tarrifL);
  169:          (void)LCD_OutChar('.');
  170:          LCD_OutInteger(tarrifR);
  171:        } 
  0184 2006         [3]     BRA   *+8 ;abs = 018c
  172:        else
  173:        {
  174:          LCD_OutString(" xxxx.xx      ");
  0186 cc0000       [2]     LDD   #" xxxx.xx      "
  0189 160000       [4]     JSR   LCD_OutString
  175:        }
  176:      break;
  177:    }
  178:  }
  018c 1b84         [2]     LEAS  4,SP
  018e 3d           [5]     RTS   
  018f 160000       [4]     JSR   LCD_OutString
  0192 ec84         [3]     LDD   4,SP
  0194 160000       [4]     JSR   LCD_OutInteger
  0197 c62e         [1]     LDAB  #46
  0199 160000       [4]     JSR   LCD_OutChar
  019c ec82         [3]     LDD   2,SP
  019e 060000       [3]     JMP   LCD_OutInteger
  01a1 c602         [1]     LDAB  #2
  01a3 160000       [4]     JSR   LCD_ClearLine
  01a6 c602         [1]     LDAB  #2
  01a8 060000       [3]     JMP   LCD_SetLine
  01ab 160000       [4]     JSR   LCD_OutInteger
  01ae c62e         [1]     LDAB  #46
  01b0 060000       [3]     JMP   LCD_OutChar
  01b3 160000       [4]     JSR   LCD_ClearLine
  01b6 c603         [1]     LDAB  #3
  01b8 060000       [3]     JMP   LCD_SetLine
  01bb 87           [1]     CLRA  
  01bc 160000       [4]     JSR   LCD_OutInteger
  01bf c63a         [1]     LDAB  #58
  01c1 060000       [3]     JMP   LCD_OutChar
  01c4 c620         [1]     LDAB  #32
  01c6 060000       [3]     JMP   LCD_OutChar
  179:  
  180:  // ----------------------------------------
  181:  // TIE5_ISR
  182:  // 
  183:  // The interrupt service routine for Timer Channel 5.
  184:  // It will determine if a pushbutton has been pressed and will
  185:  // allow for the button event to be handled.
  186:  // Input:
  187:  //   
  188:  // Output:
  189:  //   none
  190:  // Conditions:
  191:  //  none
  192:  void interrupt 13 TIE5_ISR(void)
  193:  {
*** EVALUATION ***

Function: TIE5_ISR
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\HMI.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\Full_Chip_Simulation\ObjectCode\HMI.c.o" -WmsgSd1106 -WmsgSd5703

  194:    TFLG1_C5F = 1; // Clear flag to say it was done.  
  0000 4c0020       [4]     BSET  _TFLG1,#32
  195:    //OS_ISREnter();
  196:    
  197:    Buttons_Get(&PBState); 
  0003 cc0000       [2]     LDD   #PBState
  0006 160000       [4]     JSR   Buttons_Get
  198:    
  199:    if (PBState != PrevPBState)
  0009 fc0000       [3]     LDD   PBState
  000c bc0000       [3]     CPD   PrevPBState
  000f 2712         [3/1]   BEQ   *+20 ;abs = 0023
  200:    {
  201:      HandleButtonPress(PBState, LCDState);
  0011 3b           [2]     PSHD  
  0012 fc0000       [3]     LDD   LCDState
  0015 160000       [4]     JSR   HandleButtonPress
  0018 3a           [3]     PULD  
  202:      Clock_Interval = 0;
  0019 c7           [1]     CLRB  
  001a 87           [1]     CLRA  
  001b 7c0000       [3]     STD   Clock_Interval:2
  001e 7c0000       [3]     STD   Clock_Interval
  203:    }
  0021 2018         [3]     BRA   *+26 ;abs = 003b
  204:    else if (PBState == ButtonIdle && Clock_Interval >= 15) // 15 seconds
  0023 046415       [3]     TBNE  D,*+24 ;abs = 003b
  0026 fc0000       [3]     LDD   Clock_Interval
  0029 2608         [3/1]   BNE   *+10 ;abs = 0033
  002b fc0000       [3]     LDD   Clock_Interval:2
  002e 8c000f       [2]     CPD   #15
  0031 2508         [3/1]   BCS   *+10 ;abs = 003b
  205:    {
  206:      LCD_DisplayOff();
  0033 160000       [4]     JSR   LCD_DisplayOff
  207:      LCDState = Dormant;
  0036 c7           [1]     CLRB  
  0037 87           [1]     CLRA  
  0038 7c0000       [3]     STD   LCDState
  208:    }
  209:    PrevPBState = PBState;
  003b fc0000       [3]     LDD   PBState
  003e 7c0000       [3]     STD   PrevPBState
  210:    
  211:    Timer_Enable(TIMER_Ch6, bFALSE);
  0041 c606         [1]     LDAB  #6
  0043 87           [1]     CLRA  
  0044 3b           [2]     PSHD  
  0045 c7           [1]     CLRB  
  0046 160000       [4]     JSR   Timer_Enable
  0049 3a           [3]     PULD  
  212:    //OS_ISRExit();
  213:  }
  004a 0b           [8]     RTI   
  214:  
  215:  // ----------------------------------------
  216:  // CreateMenu
  217:  // 
  218:  // Creates the menu to display on the LCD
  219:  // Input:
  220:  //   menu is the state to display on the LCD e.g. DefaultMenu
  221:  // Output:
  222:  //   none
  223:  // Conditions:
  224:  //   LCD and HMI have been setup
  225:  void CreateMenu(TLCDState menu)
  226:  {
*** EVALUATION ***

Function: CreateMenu
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\HMI.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\Full_Chip_Simulation\ObjectCode\HMI.c.o" -WmsgSd1106 -WmsgSd5703

  0000 6caa         [2]     STD   6,-SP
  227:    UINT16 tarrifL = Math_FromQN(DEM_Tarrif, qLeft, DefaultBase);
  0002 fc0000       [3]     LDD   DEM_Tarrif
  0005 3b           [2]     PSHD  
  0006 c7           [1]     CLRB  
  0007 87           [1]     CLRA  
  0008 3b           [2]     PSHD  
  0009 3b           [2]     PSHD  
  000a c603         [1]     LDAB  #3
  000c 160000       [4]     JSR   Math_FromQN
  000f 1b86         [2]     LEAS  6,SP
  0011 6c84         [2]     STD   4,SP
  228:    UINT16 tarrifR = Math_FromQN(DEM_Tarrif, qRight, DefaultBase);
  0013 fc0000       [3]     LDD   DEM_Tarrif
  0016 3b           [2]     PSHD  
  0017 c7           [1]     CLRB  
  0018 87           [1]     CLRA  
  0019 3b           [2]     PSHD  
  001a 52           [1]     INCB  
  001b 3b           [2]     PSHD  
  001c c603         [1]     LDAB  #3
  001e 160000       [4]     JSR   Math_FromQN
  0021 1b86         [2]     LEAS  6,SP
  0023 6c82         [2]     STD   2,SP
  229:    //INT16 voltage, current;
  230:    
  231:    LCD_Clear();
  0025 160000       [4]     JSR   LCD_Clear
  232:    
  233:    LCDState = menu;
  0028 ec80         [3]     LDD   0,SP
  002a 7c0000       [3]     STD   LCDState
  234:    
  235:    switch(menu)
  002d 160000       [4]     JSR   _CASE_CHECKED
  0030 0005         DC.W  5
  0032 0000         DC.W  CreateMenu:0x0249
  0034 0000         DC.W  CreateMenu:0x003e
  0036 0000         DC.W  CreateMenu:0x0079
  0038 0000         DC.W  CreateMenu:0x00df
  003a 0000         DC.W  CreateMenu:0x0157
  003c 0000         DC.W  CreateMenu:0x01d2
  236:    {
  237:      case Dormant:
  238:        LCD_SetLine(0);
  003e c7           [1]     CLRB  
  003f 160000       [4]     JSR   LCD_SetLine
  239:        LCD_OutString("                ");
  0042 cc0000       [2]     LDD   #"                "
  0045 160000       [4]     JSR   CreateMenu:0x0258
  240:        LCD_SetLine(1);
  241:        LCD_OutString("                ");
  0048 cc0000       [2]     LDD   #"                "
  004b 160000       [4]     JSR   CreateMenu:0x0270
  242:        LCD_SetLine(2);
  243:        LCD_OutString("                ");
  004e cc0000       [2]     LDD   #"                "
  0051 160000       [4]     JSR   LCD_OutString
  244:        LCD_SetLine(3);
  0054 160000       [4]     JSR   CreateMenu:0x0288
  245:        LCD_OutString("                ");
  0057 cc0000       [2]     LDD   #"                "
  005a 160000       [4]     JSR   LCD_OutString
  246:        LCD_SetLine(4);
  005d c604         [1]     LDAB  #4
  005f 160000       [4]     JSR   LCD_SetLine
  247:        LCD_OutString("                ");
  0062 cc0000       [2]     LDD   #"                "
  0065 160000       [4]     JSR   CreateMenu:0x0260
  248:        LCD_SetLine(5);
  249:        LCD_OutString("                ");
  0068 cc0000       [2]     LDD   #"                "
  006b 160000       [4]     JSR   CreateMenu:0x0278
  250:        LCD_SetLine(6);
  251:        LCD_OutString("                ");
  006e cc0000       [2]     LDD   #"                "
  0071 160000       [4]     JSR   CreateMenu:0x0268
  252:        LCD_SetLine(7);
  253:        LCD_OutString("                ");
  0074 cc0000       [2]     LDD   #"                "
  254:      break;
  0077 2064         [3]     BRA   *+102 ;abs = 00dd
  255:      
  256:      case MeteringTime:
  257:        
  258:        LCD_SetLine(0);
  0079 c7           [1]     CLRB  
  007a 160000       [4]     JSR   LCD_SetLine
  259:        LCD_OutString("$--------------$");
  007d cc0000       [2]     LDD   #"$--------------$"
  0080 160000       [4]     JSR   CreateMenu:0x0258
  260:        LCD_SetLine(1);
  261:        LCD_OutString("|Metering Time |");
  0083 cc0000       [2]     LDD   #"|Metering Time |"
  0086 160000       [4]     JSR   LCD_OutString
  262:        
  263:        if (Clock_Days <= MAX_DAYS)
  0089 f60000       [3]     LDAB  Clock_Days
  008c c163         [1]     CMPB  #99
  008e 2229         [3/1]   BHI   *+43 ;abs = 00b9
  264:        {
  265:          LCD_SetLine(2);
  0090 c602         [1]     LDAB  #2
  0092 160000       [4]     JSR   LCD_SetLine
  266:          (void)LCD_OutChar(' ');
  0095 160000       [4]     JSR   CreateMenu:0x0296
  267:          LCD_OutInteger(Clock_Days);
  0098 f60000       [3]     LDAB  Clock_Days
  009b 87           [1]     CLRA  
  009c 160000       [4]     JSR   LCD_OutInteger
  268:          (void)LCD_OutChar(':');
  009f c63a         [1]     LDAB  #58
  00a1 160000       [4]     JSR   LCD_OutChar
  269:          LCD_OutInteger(Clock_Hours);
  00a4 f60000       [3]     LDAB  Clock_Hours
  00a7 160000       [4]     JSR   CreateMenu:0x028d
  270:          (void)LCD_OutChar(':');
  271:          LCD_OutInteger(Clock_Minutes);
  00aa f60000       [3]     LDAB  Clock_Minutes
  00ad 160000       [4]     JSR   CreateMenu:0x028d
  272:          (void)LCD_OutChar(':');
  273:          LCD_OutInteger((UINT16)Clock_Seconds);
  00b0 f60000       [3]     LDAB  Clock_Seconds
  00b3 87           [1]     CLRA  
  00b4 160000       [4]     JSR   LCD_OutInteger
  274:        }
  00b7 2006         [3]     BRA   *+8 ;abs = 00bf
  275:        else
  276:          LCD_OutString(" xx:xx:xx:xx  ");
  00b9 cc0000       [2]     LDD   #" xx:xx:xx:xx  "
  00bc 160000       [4]     JSR   LCD_OutString
  277:        
  278:        LCD_SetLine(3);
  00bf 160000       [4]     JSR   CreateMenu:0x0288
  279:        LCD_OutString(" Tarrif:");
  00c2 cc0000       [2]     LDD   #" Tarrif:"
  00c5 160000       [4]     JSR   CreateMenu:0x024c
  280:        LCD_OutInteger(tarrifL);
  281:        (void)LCD_OutChar('.');
  282:        LCD_OutInteger(tarrifR);
  283:        LCD_SetLine(4);
  284:        LCD_OutString("|              |");
  00c8 cc0000       [2]     LDD   #"|              |"
  00cb 160000       [4]     JSR   CreateMenu:0x0260
  285:        LCD_SetLine(5);
  286:        LCD_OutString("|              |");
  00ce cc0000       [2]     LDD   #"|              |"
  00d1 160000       [4]     JSR   CreateMenu:0x0278
  287:        LCD_SetLine(6);
  288:        LCD_OutString("|              |");
  00d4 cc0000       [2]     LDD   #"|              |"
  00d7 160000       [4]     JSR   CreateMenu:0x0268
  289:        LCD_SetLine(7);
  290:        LCD_OutString("$------CYC-----$");
  00da cc0000       [2]     LDD   #"$------CYC-----$"
  291:      break;
  00dd 2076         [3]     BRA   *+120 ;abs = 0155
  292:      
  293:      case AveragePower:
  294:        LCD_SetLine(0);
  00df c7           [1]     CLRB  
  00e0 160000       [4]     JSR   LCD_SetLine
  295:        LCD_OutString("$--------------$");
  00e3 cc0000       [2]     LDD   #"$--------------$"
  00e6 160000       [4]     JSR   CreateMenu:0x0258
  296:        LCD_SetLine(1);
  297:        LCD_OutString("|   Ave Power  |");
  00e9 cc0000       [2]     LDD   #"|   Ave Power  |"
  00ec 160000       [4]     JSR   CreateMenu:0x0270
  298:        LCD_SetLine(2);
  299:        (void)LCD_OutChar(' ');
  00ef 160000       [4]     JSR   CreateMenu:0x0296
  300:        //voltage = Math_ConvertADCValue(Analog_Input[Ch1].Value.l);
  301:        //current = Math_ConvertADCValue(Analog_Input[Ch2].Value.l);
  302:        //DEM_Average_Power.l = Math_FindPower(voltage, current);
  303:        LCD_OutInteger(Math_FromQN(DEM_Average_Power.l, qLeft, DefaultBase << 1));
  00f2 fc0000       [3]     LDD   DEM_Average_Power
  00f5 160000       [4]     JSR   _ILSEXT
  00f8 3b           [2]     PSHD  
  00f9 34           [2]     PSHX  
  00fa c7           [1]     CLRB  
  00fb 87           [1]     CLRA  
  00fc 3b           [2]     PSHD  
  00fd c606         [1]     LDAB  #6
  00ff 160000       [4]     JSR   Math_FromQN
  0102 1b86         [2]     LEAS  6,SP
  0104 160000       [4]     JSR   CreateMenu:0x0280
  304:        (void)LCD_OutChar('.');
  305:        LCD_OutInteger(Math_FromQN(DEM_Average_Power.l, qRight, DefaultBase << 1));
  0107 fc0000       [3]     LDD   DEM_Average_Power
  010a 160000       [4]     JSR   _ILSEXT
  010d 3b           [2]     PSHD  
  010e 34           [2]     PSHX  
  010f c601         [1]     LDAB  #1
  0111 87           [1]     CLRA  
  0112 3b           [2]     PSHD  
  0113 c606         [1]     LDAB  #6
  0115 160000       [4]     JSR   Math_FromQN
  0118 1b86         [2]     LEAS  6,SP
  011a 160000       [4]     JSR   LCD_OutInteger
  306:        LCD_OutString("kW");
  011d cc0000       [2]     LDD   #"kW"
  0120 160000       [4]     JSR   LCD_OutString
  307:        LCD_SetLine(3);
  0123 160000       [4]     JSR   CreateMenu:0x0288
  308:        LCD_OutString(" Tarrif:");
  0126 cc0000       [2]     LDD   #" Tarrif:"
  0129 160000       [4]     JSR   LCD_OutString
  309:        LCD_OutInteger(tarrifL);
  012c ec84         [3]     LDD   4,SP
  012e 160000       [4]     JSR   LCD_OutInteger
  310:        (void)LCD_OutChar('.');
  0131 c62e         [1]     LDAB  #46
  0133 160000       [4]     JSR   LCD_OutChar
  311:        LCD_OutInteger(tarrifR);
  0136 ec82         [3]     LDD   2,SP
  0138 160000       [4]     JSR   CreateMenu:0x029b
  312:        LCD_SetLine(4);
  313:        LCD_OutString("|              |");
  013b cc0000       [2]     LDD   #"|              |"
  013e 160000       [4]     JSR   CreateMenu:0x0260
  314:        LCD_SetLine(5);
  315:        LCD_OutString("|              |");
  0141 cc0000       [2]     LDD   #"|              |"
  0144 160000       [4]     JSR   LCD_OutString
  316:        LCD_SetLine(6);
  0147 c606         [1]     LDAB  #6
  0149 160000       [4]     JSR   LCD_SetLine
  317:        LCD_OutString("|              |");
  014c cc0000       [2]     LDD   #"|              |"
  014f 160000       [4]     JSR   CreateMenu:0x0268
  318:        LCD_SetLine(7);
  319:        LCD_OutString("$------CYC-----$");
  0152 cc0000       [2]     LDD   #"$------CYC-----$"
  320:      break;
  0155 2079         [3]     BRA   *+123 ;abs = 01d0
  321:      
  322:      case TotalEnergy:
  323:        LCD_SetLine(0);
  0157 c7           [1]     CLRB  
  0158 160000       [4]     JSR   LCD_SetLine
  324:        LCD_OutString("$--------------$");
  015b cc0000       [2]     LDD   #"$--------------$"
  015e 160000       [4]     JSR   CreateMenu:0x0258
  325:        LCD_SetLine(1);
  326:        LCD_OutString("| Total Energy |");
  0161 cc0000       [2]     LDD   #"| Total Energy |"
  0164 160000       [4]     JSR   CreateMenu:0x0270
  327:        
  328:        LCD_SetLine(2);
  329:        if (DEM_Total_Energy.l <= MAX_ENERGY)
  0167 fc0000       [3]     LDD   DEM_Total_Energy
  016a 8c261b       [2]     CPD   #9755
  016d 250a         [3/1]   BCS   *+12 ;abs = 0179
  016f 263b         [3/1]   BNE   *+61 ;abs = 01ac
  0171 fc0000       [3]     LDD   DEM_Total_Energy:2
  0174 8c7e40       [2]     CPD   #32320
  0177 2233         [3/1]   BHI   *+53 ;abs = 01ac
  330:        {
  331:          (void)LCD_OutChar(' ');
  0179 160000       [4]     JSR   CreateMenu:0x0296
  332:          LCD_OutInteger( Math_FromQN(DEM_Total_Energy.l, qLeft, DefaultBase << 1) );
  017c fc0000       [3]     LDD   DEM_Total_Energy:2
  017f 3b           [2]     PSHD  
  0180 fc0000       [3]     LDD   DEM_Total_Energy
  0183 3b           [2]     PSHD  
  0184 c7           [1]     CLRB  
  0185 87           [1]     CLRA  
  0186 3b           [2]     PSHD  
  0187 c606         [1]     LDAB  #6
  0189 160000       [4]     JSR   Math_FromQN
  018c 1b86         [2]     LEAS  6,SP
  018e 160000       [4]     JSR   CreateMenu:0x0280
  333:          (void)LCD_OutChar('.');
  334:          LCD_OutInteger( Math_FromQN(DEM_Total_Energy.l, qRight, DefaultBase << 1) );
  0191 fc0000       [3]     LDD   DEM_Total_Energy:2
  0194 3b           [2]     PSHD  
  0195 fc0000       [3]     LDD   DEM_Total_Energy
  0198 3b           [2]     PSHD  
  0199 c601         [1]     LDAB  #1
  019b 87           [1]     CLRA  
  019c 3b           [2]     PSHD  
  019d c606         [1]     LDAB  #6
  019f 160000       [4]     JSR   Math_FromQN
  01a2 1b86         [2]     LEAS  6,SP
  01a4 160000       [4]     JSR   LCD_OutInteger
  335:          LCD_OutString("kWh");
  01a7 cc0000       [2]     LDD   #"kWh"
  336:        } 
  01aa 2003         [3]     BRA   *+5 ;abs = 01af
  337:        else
  338:          LCD_OutString(" xxx.xxx      ");
  01ac cc0000       [2]     LDD   #" xxx.xxx      "
  01af 160000       [4]     JSR   LCD_OutString
  339:        
  340:        LCD_SetLine(3);
  01b2 160000       [4]     JSR   CreateMenu:0x0288
  341:        LCD_OutString(" Tarrif:");
  01b5 cc0000       [2]     LDD   #" Tarrif:"
  01b8 160000       [4]     JSR   CreateMenu:0x024c
  342:        LCD_OutInteger(tarrifL);
  343:        (void)LCD_OutChar('.');
  344:        LCD_OutInteger(tarrifR);
  345:        LCD_SetLine(4);
  346:        LCD_OutString("|              |");
  01bb cc0000       [2]     LDD   #"|              |"
  01be 160000       [4]     JSR   CreateMenu:0x0260
  347:        LCD_SetLine(5);
  348:        LCD_OutString("|              |");
  01c1 cc0000       [2]     LDD   #"|              |"
  01c4 160000       [4]     JSR   CreateMenu:0x0278
  349:        LCD_SetLine(6);
  350:        LCD_OutString("|              |");
  01c7 cc0000       [2]     LDD   #"|              |"
  01ca 160000       [4]     JSR   CreateMenu:0x0268
  351:        LCD_SetLine(7);
  352:        LCD_OutString("$------CYC-----$");
  01cd cc0000       [2]     LDD   #"$------CYC-----$"
  353:      break;
  01d0 2074         [3]     BRA   *+118 ;abs = 0246
  354:      
  355:      case TotalCost:
  356:        LCD_SetLine(0);
  01d2 c7           [1]     CLRB  
  01d3 160000       [4]     JSR   LCD_SetLine
  357:        LCD_OutString("$--------------$");
  01d6 cc0000       [2]     LDD   #"$--------------$"
  01d9 077d         [4]     BSR   *+127 ;abs = 0258
  358:        LCD_SetLine(1);
  359:        LCD_OutString("|  Total Cost  |");
  01db cc0000       [2]     LDD   #"|  Total Cost  |"
  01de 160000       [4]     JSR   CreateMenu:0x0270
  360:        LCD_SetLine(2);
  361:        
  362:        if (DEM_Total_Cost <= MAX_COST)
  01e1 fc0000       [3]     LDD   DEM_Total_Cost
  01e4 8c007a       [2]     CPD   #122
  01e7 250a         [3/1]   BCS   *+12 ;abs = 01f3
  01e9 263c         [3/1]   BNE   *+62 ;abs = 0227
  01eb fc0000       [3]     LDD   DEM_Total_Cost:2
  01ee 8c11f8       [2]     CPD   #4600
  01f1 2234         [3/1]   BHI   *+54 ;abs = 0227
  363:        {
  364:          (void)LCD_OutChar(' ');
  01f3 160000       [4]     JSR   CreateMenu:0x0296
  365:          (void)LCD_OutChar('$');
  01f6 c624         [1]     LDAB  #36
  01f8 160000       [4]     JSR   LCD_OutChar
  366:          LCD_OutInteger( Math_FromQN(DEM_Total_Cost, qLeft, DefaultBase) );
  01fb fc0000       [3]     LDD   DEM_Total_Cost:2
  01fe 3b           [2]     PSHD  
  01ff fc0000       [3]     LDD   DEM_Total_Cost
  0202 3b           [2]     PSHD  
  0203 c7           [1]     CLRB  
  0204 87           [1]     CLRA  
  0205 3b           [2]     PSHD  
  0206 c603         [1]     LDAB  #3
  0208 160000       [4]     JSR   Math_FromQN
  020b 1b86         [2]     LEAS  6,SP
  020d 0771         [4]     BSR   *+115 ;abs = 0280
  367:          (void)LCD_OutChar('.');
  368:          LCD_OutInteger( Math_FromQN(DEM_Total_Cost, qRight, DefaultBase) );
  020f fc0000       [3]     LDD   DEM_Total_Cost:2
  0212 3b           [2]     PSHD  
  0213 fc0000       [3]     LDD   DEM_Total_Cost
  0216 3b           [2]     PSHD  
  0217 c601         [1]     LDAB  #1
  0219 87           [1]     CLRA  
  021a 3b           [2]     PSHD  
  021b c603         [1]     LDAB  #3
  021d 160000       [4]     JSR   Math_FromQN
  0220 1b86         [2]     LEAS  6,SP
  0222 160000       [4]     JSR   LCD_OutInteger
  369:        } 
  0225 2006         [3]     BRA   *+8 ;abs = 022d
  370:        else
  371:        {
  372:          LCD_OutString(" xxxx.xx      ");
  0227 cc0000       [2]     LDD   #" xxxx.xx      "
  022a 160000       [4]     JSR   LCD_OutString
  373:        }
  374:        LCD_SetLine(3);
  022d 0759         [4]     BSR   *+91 ;abs = 0288
  375:        LCD_OutString(" Tarrif:");
  022f cc0000       [2]     LDD   #" Tarrif:"
  0232 0718         [4]     BSR   *+26 ;abs = 024c
  376:        LCD_OutInteger(tarrifL);
  377:        (void)LCD_OutChar('.');
  378:        LCD_OutInteger(tarrifR);
  379:        LCD_SetLine(4);
  380:        LCD_OutString("|              |");
  0234 cc0000       [2]     LDD   #"|              |"
  0237 0727         [4]     BSR   *+41 ;abs = 0260
  381:        LCD_SetLine(5);
  382:        LCD_OutString("|              |");
  0239 cc0000       [2]     LDD   #"|              |"
  023c 073a         [4]     BSR   *+60 ;abs = 0278
  383:        LCD_SetLine(6);
  384:        LCD_OutString("|              |");
  023e cc0000       [2]     LDD   #"|              |"
  0241 0725         [4]     BSR   *+39 ;abs = 0268
  385:        LCD_SetLine(7);
  386:        LCD_OutString("$------CYC-----$");
  0243 cc0000       [2]     LDD   #"$------CYC-----$"
  0246 160000       [4]     JSR   LCD_OutString
  387:      break;
  388:    }
  389:  }
  0249 1b86         [2]     LEAS  6,SP
  024b 3d           [5]     RTS   
  024c 160000       [4]     JSR   LCD_OutString
  024f ec86         [3]     LDD   6,SP
  0251 072d         [4]     BSR   *+47 ;abs = 0280
  0253 ec84         [3]     LDD   4,SP
  0255 0744         [4]     BSR   *+70 ;abs = 029b
  0257 3d           [5]     RTS   
  0258 160000       [4]     JSR   LCD_OutString
  025b c601         [1]     LDAB  #1
  025d 060000       [3]     JMP   LCD_SetLine
  0260 160000       [4]     JSR   LCD_OutString
  0263 c605         [1]     LDAB  #5
  0265 060000       [3]     JMP   LCD_SetLine
  0268 160000       [4]     JSR   LCD_OutString
  026b c607         [1]     LDAB  #7
  026d 060000       [3]     JMP   LCD_SetLine
  0270 160000       [4]     JSR   LCD_OutString
  0273 c602         [1]     LDAB  #2
  0275 060000       [3]     JMP   LCD_SetLine
  0278 160000       [4]     JSR   LCD_OutString
  027b c606         [1]     LDAB  #6
  027d 060000       [3]     JMP   LCD_SetLine
  0280 160000       [4]     JSR   LCD_OutInteger
  0283 c62e         [1]     LDAB  #46
  0285 060000       [3]     JMP   LCD_OutChar
  0288 c603         [1]     LDAB  #3
  028a 060000       [3]     JMP   LCD_SetLine
  028d 87           [1]     CLRA  
  028e 160000       [4]     JSR   LCD_OutInteger
  0291 c63a         [1]     LDAB  #58
  0293 060000       [3]     JMP   LCD_OutChar
  0296 c620         [1]     LDAB  #32
  0298 060000       [3]     JMP   LCD_OutChar
  029b 160000       [4]     JSR   LCD_OutInteger
  029e c604         [1]     LDAB  #4
  02a0 060000       [3]     JMP   LCD_SetLine
  390:  
  391:  // ----------------------------------------
  392:  // HandleButtonPress
  393:  // 
  394:  // Determines which functions to call/what to do when a button is pressed
  395:  // Input:
  396:  //   PBState is the push button state that was most recent
  397:  //   LCDState is the menu currently displayed on the LCD
  398:  // Output:
  399:  //   none
  400:  // Conditions:
  401:  //   LCD and Buttons have been setup
  402:  void HandleButtonPress(TButtonInputs PBState, TLCDState LCDState)
  403:  {
*** EVALUATION ***

Function: HandleButtonPress
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\HMI.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\Full_Chip_Simulation\ObjectCode\HMI.c.o" -WmsgSd1106 -WmsgSd5703

  404:    switch(LCDState)
  0000 160000       [4]     JSR   _CASE_CHECKED_BYTE
  0003 05           DC.B  5
  0004 3d           DC.B  61
  0005 05           DC.B  5
  0006 1b           DC.B  27
  0007 23           DC.B  35
  0008 2b           DC.B  43
  0009 33           DC.B  51
  405:    {
  406:      case Dormant:
  407:        switch(PBState)
  000a ec82         [3]     LDD   2,SP
  000c 160000       [4]     JSR   _CASE_SEARCH_8_BYTE
  000f 80           DC.B  128
  0010 33           DC.B  51
  0011 04           DC.B  4
  0012 0a           DC.B  10
  0013 08           DC.B  8
  0014 08           DC.B  8
  0015 10           DC.B  16
  0016 06           DC.B  6
  0017 20           DC.B  32
  0018 04           DC.B  4
  0019 80           DC.B  128
  001a 02           DC.B  2
  408:        {
  409:          case Button0:
  410:          case Button1:
  411:          case Button2:
  412:          case Button3:
  413:          case Button4:
  414:            LCD_DisplayOn();
  001b 160000       [4]     JSR   LCD_DisplayOn
  415:            CreateMenu(MeteringTime);
  416:          break;
  001e 201c         [3]     BRA   *+30 ;abs = 003c
  417:        }
  418:      break;
  419:      
  420:      case MeteringTime:
  421:        switch(PBState)
  0020 0721         [4]     BSR   *+35 ;abs = 0043
  0022 261e         [3/1]   BNE   *+32 ;abs = 0042
  422:        {
  423:          case Button2:
  424:            CreateMenu(AveragePower);
  0024 c602         [1]     LDAB  #2
  425:          break;
  0026 2016         [3]     BRA   *+24 ;abs = 003e
  426:        }
  427:      break;
  428:      
  429:      case AveragePower:
  430:        switch(PBState)
  0028 0719         [4]     BSR   *+27 ;abs = 0043
  002a 2616         [3/1]   BNE   *+24 ;abs = 0042
  431:        {
  432:          case Button2:
  433:            CreateMenu(TotalEnergy);  
  002c c603         [1]     LDAB  #3
  434:          break;
  002e 200e         [3]     BRA   *+16 ;abs = 003e
  435:        }
  436:      break;
  437:      
  438:      case TotalEnergy:
  439:        switch(PBState)
  0030 0711         [4]     BSR   *+19 ;abs = 0043
  0032 260e         [3/1]   BNE   *+16 ;abs = 0042
  440:        {
  441:          case Button2:
  442:            CreateMenu(TotalCost);
  0034 c604         [1]     LDAB  #4
  443:          break;
  0036 2006         [3]     BRA   *+8 ;abs = 003e
  444:        }
  445:      break;
  446:      
  447:      case TotalCost:
  448:        switch(PBState)
  0038 0709         [4]     BSR   *+11 ;abs = 0043
  003a 2606         [3/1]   BNE   *+8 ;abs = 0042
  449:        {
  450:          case Button2:
  451:            CreateMenu(MeteringTime);
  003c c601         [1]     LDAB  #1
  003e 87           [1]     CLRA  
  003f 160000       [4]     JSR   CreateMenu
  452:          break;
  453:        }
  454:      break;
  455:    }
  456:    
  457:  }
  0042 3d           [5]     RTS   
  0043 ec84         [3]     LDD   4,SP
  0045 8c0010       [2]     CPD   #16
  0048 3d           [5]     RTS   
  458:  
