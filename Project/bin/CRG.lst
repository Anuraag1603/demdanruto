*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.41 Build 10203, Jul 23 2010

    1:  // ----------------------------------------
    2:  // Filename: CRG.c
    3:  // Description: Routines for setting up the
    4:  //   clock and reset generator
    5:  // Author: PMcL
    6:  //         Danny Sok
    7:  //         Edward Khou
    8:  // Date Created: 24-08-2011
    9:  // Date Last Modified: 30-08-2011
   10:  
   11:  #include "CRG.h"
   12:  
   13:  
   14:  // ----------------------------------------
   15:  // CRG_SetupPLL
   16:  // 
   17:  // Sets up the PLL to generate a certain bus clock
   18:  // Input:
   19:  //   busClk is the desired bus clock rate in Hz,
   20:  //   oscClk is the oscillator clock in Hz, 
   21:  //   refClk is the reference clock in Hz
   22:  // Output:
   23:  //   TRUE if the bus clock was setup successfully
   24:  // Conditions:
   25:  //   Assumes that refClk divides oscClk evenly
   26:  //   Assumes that refClk divides busClk evenly
   27:  BOOL CRG_SetupPLL(const UINT32 busClk, const UINT32 oscClk, const UINT32 refClk)
   28:  {
*** EVALUATION ***

Function: CRG_SetupPLL
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\CRG.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\CRG.c.o" -WmsgSd1106 -WmsgSd5703

  0000 6cac         [2]     STD   4,-SP
  0002 34           [2]     PSHX  
   29:    UINT16 loopCounter = 0;
  0003 c7           [1]     CLRB  
  0004 87           [1]     CLRA  
  0005 6c84         [2]     STD   4,SP
   30:    // We want busClk = 24Mhz
   31:    // oscClk/sysClk = 48Mhz after PPL
   32:    SYNR          = ((busClk / refClk) - 1);
  0007 ee82         [3]     LDX   2,SP
  0009 34           [2]     PSHX  
  000a ed82         [3]     LDY   2,SP
  000c 35           [2]     PSHY  
  000d ecf012       [3]     LDD   18,SP
  0010 eef010       [3]     LDX   16,SP
  0013 160000       [4]     JSR   _LDIVU
  0016 53           [1]     DECB  
  0017 5b00         [2]     STAB  _SYNR
   33:    REFDV         = ((oscClk / refClk) - 1);
  0019 ec82         [3]     LDD   2,SP
  001b 3b           [2]     PSHD  
  001c ec82         [3]     LDD   2,SP
  001e 3b           [2]     PSHD  
  001f ec8e         [3]     LDD   14,SP
  0021 ee8c         [3]     LDX   12,SP
  0023 160000       [4]     JSR   _LDIVU
  0026 53           [1]     DECB  
  0027 5b00         [2]     STAB  _REFDV
   34:    
   35:    PLLCTL_PLLON  = 1;                          // Needs to be written before PPLSEL = 1; Turns on the circuit
  0029 4c0040       [4]     BSET  _PLLCTL,#64
   36:    
   37:    // refer to page 33. 50000 is the check window
   38:    while (CRGFLG_LOCK == 0 && loopCounter < 50000) // Running in correct requency
  002c 2005         [3]     BRA   *+7 ;abs = 0033
   39:      loopCounter++;
  002e ee84         [3]     LDX   4,SP
  0030 08           [1]     INX   
  0031 6e84         [2]     STX   4,SP
  0033 4e000807     [4]     BRSET _CRGFLG,#8,*+11 ;abs = 003e
  0037 ec84         [3]     LDD   4,SP
  0039 8cc350       [2]     CPD   #50000
  003c 25f0         [3/1]   BCS   *-14 ;abs = 002e
   40:    
   41:    if (loopCounter == 50000)
  003e ec84         [3]     LDD   4,SP
  0040 8cc350       [2]     CPD   #50000
  0043 2603         [3/1]   BNE   *+5 ;abs = 0048
   42:      return bFALSE;
  0045 c7           [1]     CLRB  
  0046 2005         [3]     BRA   *+7 ;abs = 004d
   43:  
   44:    CLKSEL_PLLSEL = 1;                           // Sets up PPL
  0048 4c0080       [4]     BSET  _CLKSEL,#128
   45:    return bTRUE; 
  004b c601         [1]     LDAB  #1
  004d 87           [1]     CLRA  
   46:  }
  004e 1b86         [2]     LEAS  6,SP
  0050 3d           [5]     RTS   
   47:  
   48:  // ----------------------------------------
   49:  // CRG_SetupCOP
   50:  // 
   51:  // Sets up the COP to reset within a certain
   52:  //   number of milliseconds
   53:  // Input:
   54:  //   Desired COP watchdog rate, corresponding to
   55:  //   Table 3.3 in the CRG Block User Guide
   56:  // Output:
   57:  //   TRUE if the COP was setup successfully
   58:  // Conditions:
   59:  //   none
   60:  BOOL CRG_SetupCOP(const UINT8 watchDogRate)
   61:  {  
*** EVALUATION ***

Function: CRG_SetupCOP
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\CRG.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\CRG.c.o" -WmsgSd1106 -WmsgSd5703

  0000 37           [2]     PSHB  
   62:     // Cannot exceed 7 in binary; Cannot be disabled
   63:     if ( (watchDogRate > 7) && (COPCTL_CR == 0) )
  0001 c107         [1]     CMPB  #7
  0003 2309         [3/1]   BLS   *+11 ;abs = 000e
  0005 4f000702     [4]     BRCLR _COPCTL,#7,*+6 ;abs = 000b
  0009 2003         [3]     BRA   *+5 ;abs = 000e
   64:      return bFALSE;
  000b c7           [1]     CLRB  
  000c 200f         [3]     BRA   *+17 ;abs = 001d
   65:     
   66:     COPCTL_RSBCK = 1;                          // To allow for background debugging
  000e 4c0040       [4]     BSET  _COPCTL,#64
   67:     COPCTL_CR    = watchDogRate;
  0011 d600         [3]     LDAB  _COPCTL
  0013 e880         [3]     EORB  0,SP
  0015 c407         [1]     ANDB  #7
  0017 d800         [3]     EORB  _COPCTL
  0019 5b00         [2]     STAB  _COPCTL
   68:     return bTRUE;
  001b c601         [1]     LDAB  #1
  001d 87           [1]     CLRA  
   69:  }
  001e 1b81         [2]     LEAS  1,SP
  0020 3d           [5]     RTS   
   70:  
   71:  // ----------------------------------------
   72:  // CRG_SetupRTI
   73:  // 
   74:  // Sets up the RTI as a periodic timer
   75:  // Input:
   76:  //   Desired prescale rate and modulus count,
   77:  //   corresponding to Table 3.2 in the CRG Block User Guide
   78:  // Output:
   79:  //   TRUE if the RTI was setup successfully
   80:  // Conditions:
   81:  //   none
   82:  
   83:  void CRG_SetupRTI(const UINT8 prescaleRate, const UINT8 modulusCount)
   84:  {
*** EVALUATION ***

Function: CRG_SetupRTI
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\CRG.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\CRG.c.o" -WmsgSd1106 -WmsgSd5703

  0000 37           [2]     PSHB  
   85:    // 2^16 = 65353. So RTR[6:4] (Prescale) = 111 and RTR[3:0] (Mod) = 1111.
   86:  
   87:    RTICTL = (prescaleRate << 4) | modulusCount;
  0001 c610         [1]     LDAB  #16
  0003 a683         [3]     LDAA  3,SP
  0005 12           [1]     MUL   
  0006 eab0         [3]     ORAB  1,SP+
  0008 5b00         [2]     STAB  _RTICTL
   88:    CRGINT_RTIE = 1;      // enable RTI interupt
  000a 4c0080       [4]     BSET  _CRGINT,#128
   89:  }
  000d 3d           [5]     RTS   
   90:  
   91:  void interrupt 7 CRG_RTI_ISR(void)
   92:  {
*** EVALUATION ***

Function: CRG_RTI_ISR
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\CRG.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\CRG.c.o" -WmsgSd1106 -WmsgSd5703

   93:    CRGFLG_RTIF = 1;             // Clears the flag stupidly... needs to be written 1.
  0000 4c0080       [4]     BSET  _CRGFLG,#128
   94:    
   95:    if (Debug)
  0003 fc0420       [3]     LDD   1056
  0006 2708         [3/1]   BEQ   *+10 ;abs = 0010
   96:      PTT_PTT5 ^= 1;             // Set as output
  0008 f60000       [3]     LDAB  _PTT
  000b c820         [1]     EORB  #32
  000d 7b0000       [3]     STAB  _PTT
   97:    
   98:    Clock_MicroSeconds += 65535; // Increase MicroSeconds by 65535 as that's how often this interrupt should be called
  0010 fc0000       [3]     LDD   Clock_MicroSeconds:2
  0013 c3ffff       [2]     ADDD  #65535
  0016 7c0000       [3]     STD   Clock_MicroSeconds:2
  0019 fc0000       [3]     LDD   Clock_MicroSeconds
  001c c900         [1]     ADCB  #0
  001e 8900         [1]     ADCA  #0
  0020 7c0000       [3]     STD   Clock_MicroSeconds
   99:                                 // 65.535 ms  
  100:    
  101:  }
  0023 0b           [8]     RTI   
  102:  
