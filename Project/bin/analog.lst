*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.41 Build 10203, Jul 23 2010

    1:                                                                                                                          // ----------------------------------------
    2:  // Filename: analog.c
    3:  // Description: Routines for setting up and
    4:  //   reading from the ADC/DAC
    5:  // Author: Danny Sok
    6:  //         Edward Khou
    7:  // Date: 24-09-2011
    8:  // Date Last Modified: 12-10-2011 
    9:  
   10:  #include "analog.h"
   11:  
   12:  
   13:  static const INT16 ADC_OFFSET = 2048; // 12 Bit Offset, 1000 0000 0000
   14:  static Element;
   15:  //static const INT16 DAC_OFFSET = 2048;
   16:  
   17:  // ----------------------------------------
   18:  // Analog_Setup
   19:  // 
   20:  // Sets up the ADC and DAC
   21:  // Input:
   22:  //   busClk is the bus clock speed
   23:  // Output:
   24:  //   none
   25:  // Conditions:
   26:  //   none
   27:  
   28:  void Analog_Setup(const UINT32 busClk) 
   29:  {
*** EVALUATION ***

Function: Analog_Setup
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\analog.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\analog.c.o" -WmsgSd1106 -WmsgSd5703

  0000 1b94         [2]     LEAS  -12,SP
  0002 3b           [2]     PSHD  
  0003 34           [2]     PSHX  
   30:    
   31:    TSPISetup aSPISetup;
   32:      
   33:    aSPISetup.isMaster          = bTRUE;                      // Master
  0004 c601         [1]     LDAB  #1
  0006 87           [1]     CLRA  
  0007 6c84         [2]     STD   4,SP
   34:    aSPISetup.activeLowClock    = bFALSE;                     // High clock
  0009 6987         [2]     CLR   7,SP
  000b 6986         [2]     CLR   6,SP
   35:    aSPISetup.evenEdgeClock     = bTRUE;                      // Even
  000d 6c88         [2]     STD   8,SP
   36:    aSPISetup.LSBFirst          = bFALSE;                     // MSB
  000f c7           [1]     CLRB  
  0010 6c8a         [2]     STD   10,SP
   37:    aSPISetup.baudRate          = 1000000;                    // 1 Mbit
  0012 ce4240       [2]     LDX   #16960
  0015 6e8e         [2]     STX   14,SP
  0017 c60f         [1]     LDAB  #15
  0019 6c8c         [2]     STD   12,SP
   38:    
   39:    NbAnalogInputs.l            = 2;
  001b c602         [1]     LDAB  #2
  001d 7c0000       [3]     STD   NbAnalogInputs
   40:    NbAnalogOutputs.l           = 2;
  0020 7c0000       [3]     STD   NbAnalogOutputs
   41:    Element = 0;
  0023 c7           [1]     CLRB  
  0024 7c0000       [3]     STD   Element
   42:    
   43:    SPI_Setup(&aSPISetup, busClk);
  0027 1984         [2]     LEAY  4,SP
  0029 35           [2]     PSHY  
  002a ec84         [3]     LDD   4,SP
  002c ee82         [3]     LDX   2,SP
  002e 160000       [4]     JSR   SPI_Setup
   44:    
   45:    // No selection
   46:    PTH_PTH4 = 0;
  0031 1d000010     [4]     BCLR  _PTH,#16
   47:    PTH_PTH5 = 0;
  0035 1d000020     [4]     BCLR  _PTH,#32
   48:    PTH_PTH6 = 0;
  0039 1d000040     [4]     BCLR  _PTH,#64
   49:  }
  003d 1bf012       [2]     LEAS  18,SP
  0040 3d           [5]     RTS   
   50:  
   51:  // ----------------------------------------
   52:  // PWM_Setup
   53:  // 
   54:  // Sets up the Pulse Width Modulators for use with the DAC (missing LPFilter)
   55:  // Input:
   56:  //   busClk is the bus clock speed
   57:  // Output:
   58:  //   none
   59:  // Conditions:
   60:  //   none
   61:  void PWM_Setup(const UINT32 busClk)
   62:  {
*** EVALUATION ***

Function: PWM_Setup
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\analog.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\analog.c.o" -WmsgSd1106 -WmsgSd5703

   63:    // 50 Duty Cycle => PWMDTY = 128, PWMPER = 256
   64:    // Setup 2 PWMs, one for Voltage, one for Current
   65:    
   66:    // PWM Setups
   67:    
   68:    PWMPOL_PPOL0  = 1;    // Low to High 50
  0000 4c0001       [4]     BSET  _PWMPOL,#1
   69:    PWMPOL_PPOL1  = 1;    // Low to High 25
  0003 4c0002       [4]     BSET  _PWMPOL,#2
   70:    PWMPOL_PPOL2  = 1;    // Low to High 0
  0006 4c0004       [4]     BSET  _PWMPOL,#4
   71:    PWMPOL_PPOL3  = 0;    // High to Low 50
  0009 4d0008       [4]     BCLR  _PWMPOL,#8
   72:    PWMPOL_PPOL4  = 0;    // High to Low 25
  000c 4d0010       [4]     BCLR  _PWMPOL,#16
   73:    PWMPOL_PPOL5  = 0;    // High to Low 0
  000f 4d0020       [4]     BCLR  _PWMPOL,#32
   74:    
   75:    PWMCLK_PCLK0  = 1;    // Clock A
  0012 4c0001       [4]     BSET  _PWMCLK,#1
   76:    PWMCLK_PCLK1  = 1;    // Clock A
  0015 4c0002       [4]     BSET  _PWMCLK,#2
   77:    PWMCLK_PCLK2  = 1;    // Clock B
  0018 4c0004       [4]     BSET  _PWMCLK,#4
   78:    PWMCLK_PCLK3  = 1;    // Clock B
  001b 4c0008       [4]     BSET  _PWMCLK,#8
   79:    PWMCLK_PCLK4  = 1;    // Clock A
  001e 4c0010       [4]     BSET  _PWMCLK,#16
   80:    PWMCLK_PCLK5  = 1;    // Clock A
  0021 4c0020       [4]     BSET  _PWMCLK,#32
   81:    
   82:    PWMCAE_CAE0   = 0;    // Left Align
  0024 4d0001       [4]     BCLR  _PWMCAE,#1
   83:    PWMCAE_CAE1   = 0;    // Left Align
  0027 4d0002       [4]     BCLR  _PWMCAE,#2
   84:    PWMCAE_CAE2   = 0;    // Left Align
  002a 4d0004       [4]     BCLR  _PWMCAE,#4
   85:    PWMCAE_CAE3   = 0;    // Left Align
  002d 4d0008       [4]     BCLR  _PWMCAE,#8
   86:    PWMCAE_CAE4   = 0;    // Left Align
  0030 4d0010       [4]     BCLR  _PWMCAE,#16
   87:    PWMCAE_CAE5   = 0;    // Left Align
  0033 4d0020       [4]     BCLR  _PWMCAE,#32
   88:    
   89:    PWMPRCLK_PCKA = 7;    // busClk / 128 prescale
  0036 4c0007       [4]     BSET  _PWMPRCLK,#7
   90:    PWMPRCLK_PCKB = 7;    // busClk / 128 prescale
  0039 4c0070       [4]     BSET  _PWMPRCLK,#112
   91:    
   92:    
   93:    PWMCTL_CON01  = 0;    // Seperate Channel
  003c 4d0010       [4]     BCLR  _PWMCTL,#16
   94:    PWMCTL_CON23  = 0;    // Seperate Channel
  003f 4d0020       [4]     BCLR  _PWMCTL,#32
   95:    PWMCTL_CON45  = 0;    // Seperate Channel
  0042 4d0040       [4]     BCLR  _PWMCTL,#64
   96:    
   97:    PWMCTL_PSWAI  = 1;    // PWM Stops in Wait Mode           :: 1 Stop Input Clock
  0045 4c0008       [4]     BSET  _PWMCTL,#8
   98:    PWMCTL_PFRZ   = 1;    // PWM Counters Stop in Freeze Mode :: 1 Disable PWM Input Clock
  0048 4c0004       [4]     BSET  _PWMCTL,#4
   99:    
  100:    PWMPER0       = 255;  // PWM Period
  004b cc7fff       [2]     LDD   #32767
  004e 5b00         [2]     STAB  _PWMPER01
  101:    PWMPER1       = 255;  // PWM Period
  0050 5b00         [2]     STAB  _PWMPER01:1
  102:    PWMPER2       = 255;  // PWM Period
  0052 5b00         [2]     STAB  _PWMPER23
  103:    PWMPER3       = 255;  // PWM Period
  0054 5b00         [2]     STAB  _PWMPER23:1
  104:    PWMPER4       = 255;  // PWM Period
  0056 5b00         [2]     STAB  _PWMPER45
  105:    PWMPER5       = 255;  // PWM Period
  0058 5b00         [2]     STAB  _PWMPER45:1
  106:    
  107:    PWMDTY0       = 127;  // 50 Duty Cycle
  005a 54           [1]     LSRB  
  005b 5b00         [2]     STAB  _PWMDTY01
  108:    PWMDTY1       = 63;   // 25 Duty Cycle
  005d 57           [1]     ASRB  
  005e 5b00         [2]     STAB  _PWMDTY01:1
  109:    PWMDTY2       = 0;    // 0  Duty Cycle
  0060 790000       [3]     CLR   _PWMDTY23
  110:    PWMDTY3       = 127;  // 50 Duty Cycle
  0063 5a00         [2]     STAA  _PWMDTY23:1
  111:    PWMDTY4       = 63;   // 25 Duty Cycle
  0065 5b00         [2]     STAB  _PWMDTY45
  112:    PWMDTY5       = 0;    // 0  Duty Cycle
  0067 790000       [3]     CLR   _PWMDTY45:1
  113:    
  114:    PWME_PWME0    = 1;    // PWM 0 Enable
  006a 4c0001       [4]     BSET  _PWME,#1
  115:    PWME_PWME1    = 1;    // PWM 1 Enable
  006d 4c0002       [4]     BSET  _PWME,#2
  116:    PWME_PWME2    = 1;    // PWM 2 Enable
  0070 4c0004       [4]     BSET  _PWME,#4
  117:    PWME_PWME3    = 1;    // PWM 3 Enable
  0073 4c0008       [4]     BSET  _PWME,#8
  118:    PWME_PWME4    = 1;    // PWM 4 Enable
  0076 4c0010       [4]     BSET  _PWME,#16
  119:    PWME_PWME5    = 1;    // PWM 5 Enable
  0079 4c0020       [4]     BSET  _PWME,#32
  120:  }
  007c 3d           [5]     RTS   
  121:  
  122:  // ----------------------------------------
  123:  // Analog_Get
  124:  // 
  125:  // Gets an analog input channel's value based on the mode
  126:  // Input:
  127:  //   channelNb is the number of the anlog input channel to read
  128:  // Output:
  129:  //   none
  130:  // Conditions:
  131:  //   Assumes that the ADC has been set up
  132:  
  133:  void Analog_Get(const TChannelNb channelNb)
  134:  {
*** EVALUATION ***

Function: Analog_Get
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\analog.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\analog.c.o" -WmsgSd1106 -WmsgSd5703

  0000 1b92         [2]     LEAS  -14,SP
  0002 3b           [2]     PSHD  
  0003 3b           [2]     PSHD  
  135:    TUINT16 conversionResult;
  136:    INT16 medianArray[3];
  137:    INT16 x, y, temp = 0;
  138:    
  139:    UINT8 txByte, txByte2, txByte3;
  140:    txByte = 0x06; // Masking out D2 and don't cares [0000 0110]
  141:    
  142:    // 0000 00(d1)(d0)
  143:    // (d1)(d0)00 0000
  144:    txByte2 = channelNb << 6;   // Channel Select
  0004 c640         [1]     LDAB  #64
  0006 a683         [3]     LDAA  3,SP
  0008 12           [1]     MUL   
  0009 6b8b         [2]     STAB  11,SP
  145:    
  146:    txByte3 = 0; // Don't cares
  000b 6984         [2]     CLR   4,SP
  147:    
  148:    // Value: 3 for Analog IO (Transmission, data to Rx)
  149:    // Value: 0 for NULL since we don't send anything to the SPI.
  150:    
  151:    // 3 Low (Inverted) for transfer (CS3) - ADC
  152:    PTH_PTH4 = 1; 
  000d c606         [1]     LDAB  #6
  000f 1c000010     [4]     BSET  _PTH,#16
  153:    PTH_PTH5 = 1;
  0013 1c000020     [4]     BSET  _PTH,#32
  154:    PTH_PTH6 = 0;
  0017 1d000040     [4]     BCLR  _PTH,#64
  155:    
  156:    SPI_ExchangeChar(txByte,  &conversionResult.s.Hi);  // Rx Values are '?' so discard.
  001b 37           [2]     PSHB  
  001c 1a88         [2]     LEAX  8,SP
  001e b754         [1]     TFR   X,D
  0020 6e81         [2]     STX   1,SP
  0022 160000       [4]     JSR   SPI_ExchangeChar
  0025 32           [3]     PULA  
  157:    SPI_ExchangeChar(txByte2, &conversionResult.s.Hi);  // Rx Values are NULL, B11->B8
  0026 e68b         [3]     LDAB  11,SP
  0028 37           [2]     PSHB  
  0029 ec81         [3]     LDD   1,SP
  002b 160000       [4]     JSR   SPI_ExchangeChar
  002e 32           [3]     PULA  
  158:    SPI_ExchangeChar(txByte3, &conversionResult.s.Lo);  // Rx Values are B7->B0
  002f e684         [3]     LDAB  4,SP
  0031 37           [2]     PSHB  
  0032 1a89         [2]     LEAX  9,SP
  0034 b754         [1]     TFR   X,D
  0036 160000       [4]     JSR   SPI_ExchangeChar
  0039 32           [3]     PULA  
  159:    conversionResult.s.Hi &= 0x0F;                      // Mask out the NULL bit [? ? ? 0 B11 B10 B09 B08]
  003a 0d87f0       [4]     BCLR  7,SP,#240
  160:    
  161:    // 0 High (Inverted) for no transfer
  162:    PTH_PTH4 = 0;
  003d 1d000010     [4]     BCLR  _PTH,#16
  163:    PTH_PTH5 = 0;
  0041 1d000020     [4]     BCLR  _PTH,#32
  164:    PTH_PTH6 = 0;
  0045 1d000040     [4]     BCLR  _PTH,#64
  165:    
  166:    // Use median filter with sliding window of the 3 most recent samples
  167:    Analog_Input[channelNb].Value3 = Analog_Input[channelNb].Value2;
  0049 c60a         [1]     LDAB  #10
  004b 87           [1]     CLRA  
  004c ed82         [3]     LDY   2,SP
  004e 13           [3]     EMUL  
  004f b745         [1]     TFR   D,X
  0051 ede20000     [4]     LDY   Analog_Input:6,X
  0055 6de20000     [3]     STY   Analog_Input:8,X
  168:    Analog_Input[channelNb].Value2 = Analog_Input[channelNb].Value1;
  0059 ede20000     [4]     LDY   Analog_Input:4,X
  005d 6de20000     [3]     STY   Analog_Input:6,X
  169:    //The term 'bipolar' indicates that the signal swings above and below some reference level. 
  170:    //In single-ended systems, the input is typically referenced to analog ground, so a bipolar signal is one that swings above and below ground.
  171:    Analog_Input[channelNb].Value1 = ADC_OFFSET - (INT16)conversionResult.l;
  0061 8608         [1]     LDAA  #8
  0063 c7           [1]     CLRB  
  0064 a387         [3]     SUBD  7,SP
  0066 6ce20000     [3]     STD   Analog_Input:4,X
  172:    
  173:    
  174:    Analog_Input[channelNb].OldValue.l = Analog_Input[channelNb].Value.l;
  006a ece20000     [4]     LDD   Analog_Input,X
  006e 6ce20000     [3]     STD   Analog_Input:2,X
  175:    
  176:    medianArray[0] = Analog_Input[channelNb].Value1;
  0072 ece20000     [4]     LDD   Analog_Input:4,X
  0076 6c8c         [2]     STD   12,SP
  177:    medianArray[1] = Analog_Input[channelNb].Value2;
  0078 ece20000     [4]     LDD   Analog_Input:6,X
  007c 6c8e         [2]     STD   14,SP
  178:    medianArray[2] = Analog_Input[channelNb].Value3;
  007e ece20000     [4]     LDD   Analog_Input:8,X
  0082 6cf010       [3]     STD   16,SP
  179:    
  180:    // B.Sort. Low to High. Find Mid, yo
  181:    for (x = 0; x < 3; x++)
  0085 c7           [1]     CLRB  
  0086 87           [1]     CLRA  
  0087 6c89         [2]     STD   9,SP
  182:    {
  183:      for(y = 0; y < 2; y++)
  0089 c7           [1]     CLRB  
  008a 87           [1]     CLRA  
  008b 6c85         [2]     STD   5,SP
  184:      {
  185:        if(medianArray[y] > medianArray[y+1])
  008d ec85         [3]     LDD   5,SP
  008f 59           [1]     LSLD  
  0090 1a8c         [2]     LEAX  12,SP
  0092 1ae6         [2]     LEAX  D,X
  0094 ec00         [3]     LDD   0,X
  0096 ac02         [3]     CPD   2,X
  0098 2f06         [3/1]   BLE   *+8 ;abs = 00a0
  186:        {// swap vars
  187:          temp = medianArray[y];
  188:          medianArray[y] = medianArray[y+1];
  009a ed02         [3]     LDY   2,X
  009c 6d00         [2]     STY   0,X
  189:          medianArray[y+1] = temp;  
  009e 6c02         [2]     STD   2,X
  00a0 ee85         [3]     LDX   5,SP
  00a2 08           [1]     INX   
  00a3 6e85         [2]     STX   5,SP
  00a5 8e0002       [2]     CPX   #2
  00a8 2de3         [3/1]   BLT   *-27 ;abs = 008d
  00aa ee89         [3]     LDX   9,SP
  00ac 08           [1]     INX   
  00ad 6e89         [2]     STX   9,SP
  00af 8e0003       [2]     CPX   #3
  00b2 2dd5         [3/1]   BLT   *-41 ;abs = 0089
  190:        } 
  191:      }
  192:    }
  193:  	
  194:  	Analog_Input[channelNb].Value.l = medianArray[1]; // Middle Value of B.Sort
  00b4 c60a         [1]     LDAB  #10
  00b6 87           [1]     CLRA  
  00b7 ed82         [3]     LDY   2,SP
  00b9 13           [3]     EMUL  
  00ba ee8e         [3]     LDX   14,SP
  00bc b746         [1]     TFR   D,Y
  00be 6eea0000     [3]     STX   Analog_Input,Y
  195:    
  196:  }
  00c2 1bf012       [2]     LEAS  18,SP
  00c5 3d           [5]     RTS   
  197:  
  198:  
  199:  void Analog_Put(const TChannelNb channelNb)
  200:  {
*** EVALUATION ***

Function: Analog_Put
Source  : F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources\analog.c
Options : -CPUHCS12 -D__NO_FLOAT__ -Env"GENPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\prm;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\cmd;F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"OBJPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Env"TEXTPATH=F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\bin" -Lasm=%n.lst -Ms -ObjN="F:\Dropbox\S11\Embedded Software\Assignments\demdanruto\Project\Project_Data\ModCon_Board\ObjectCode\analog.c.o" -WmsgSd1106 -WmsgSd5703

  0000 1b99         [2]     LEAS  -7,SP
  0002 3b           [2]     PSHD  
  201:    TUINT16 voltage, current, rxByte;
  202:    UINT8 channelNbHex;
  203:    voltage = Analog_OutVoltage[Element];
  0003 fc0000       [3]     LDD   Element
  0006 59           [1]     LSLD  
  0007 b745         [1]     TFR   D,X
  0009 ede20000     [4]     LDY   Analog_OutVoltage,X
  000d 6d87         [2]     STY   7,SP
  204:    current = Analog_OutCurrent[Element];
  000f ece20000     [4]     LDD   Analog_OutCurrent,X
  0013 6c85         [2]     STD   5,SP
  205:    Element++;
  0015 fe0000       [3]     LDX   Element
  0018 08           [1]     INX   
  0019 7e0000       [3]     STX   Element
  206:    
  207:    if (Element == 127)
  001c 8e007f       [2]     CPX   #127
  001f 2605         [3/1]   BNE   *+7 ;abs = 0026
  208:      Element = 0;
  0021 c7           [1]     CLRB  
  0022 87           [1]     CLRA  
  0023 7c0000       [3]     STD   Element
  209:    //Element % 128;
  210:    
  211:    switch (channelNb)
  0026 ec80         [3]     LDD   0,SP
  0028 2705         [3/1]   BEQ   *+7 ;abs = 002f
  002a 040405       [3]     DBEQ  D,*+8 ;abs = 0032
  002d 2007         [3]     BRA   *+9 ;abs = 0036
  212:    {
  213:      case Ch1:
  214:        channelNbHex = 0x20;
  002f c620         [1]     LDAB  #32
  215:      break;
  0031 8f           [2]     SKIP2 
  216:      case Ch2:
  217:        channelNbHex = 0x60;
  0032 c660         [1]     LDAB  #96
  0034 6b84         [2]     STAB  4,SP
  218:      break;
  219:    }
  220:    
  221:    PTH_PTH4 = 0;
  0036 073f         [4]     BSR   *+65 ;abs = 0077
  222:    PTH_PTH5 = 0;
  223:    PTH_PTH6 = 1;
  0038 1c000040     [4]     BSET  _PTH,#64
  224:    
  225:    
  226:    // Output Chan + Normal Operation + Input register updated [0110 0000]
  227:    SPI_ExchangeChar(channelNbHex | (voltage.s.Hi & 0x0F),  &rxByte.s.Hi);
  003c e687         [3]     LDAB  7,SP
  003e 0728         [4]     BSR   *+42 ;abs = 0068
  228:    asm nop;
  0040 a7           [1]     NOP   
  229:    //SPI_ExchangeChar( ((PWMCNT2 & 0x0F) | channelNbHex),  &rxByte.s.Hi);      
  230:    SPI_ExchangeChar(voltage.s.Lo, &rxByte.s.Lo);
  0041 e688         [3]     LDAB  8,SP
  0043 0712         [4]     BSR   *+20 ;abs = 0057
  231:    
  232:      // 0 High (Inverted) for no transfer
  233:    PTH_PTH4 = 0;
  234:    PTH_PTH5 = 0;
  235:    PTH_PTH6 = 0;
  236:    
  237:    PTH_PTH4 = 0;
  0045 0730         [4]     BSR   *+50 ;abs = 0077
  238:    PTH_PTH5 = 0;
  239:    PTH_PTH6 = 1;
  0047 1c000040     [4]     BSET  _PTH,#64
  240:    
  241:    
  242:    // Output Chan + Normal Operation + Input register updated [0110 0000]
  243:    SPI_ExchangeChar(channelNbHex | (current.s.Hi & 0x0F),  &rxByte.s.Hi);
  004b e685         [3]     LDAB  5,SP
  004d 0719         [4]     BSR   *+27 ;abs = 0068
  244:    asm nop;
  004f a7           [1]     NOP   
  245:    //SPI_ExchangeChar( ((PWMCNT2 & 0x0F) | channelNbHex),  &rxByte.s.Hi);      
  246:    SPI_ExchangeChar(current.s.Lo, &rxByte.s.Lo);
  0050 e686         [3]     LDAB  6,SP
  0052 0703         [4]     BSR   *+5 ;abs = 0057
  247:    
  248:      // 0 High (Inverted) for no transfer
  249:    PTH_PTH4 = 0;
  250:    PTH_PTH5 = 0;
  251:    PTH_PTH6 = 0;
  252:  }
  0054 1b89         [2]     LEAS  9,SP
  0056 3d           [5]     RTS   
  0057 37           [2]     PSHB  
  0058 1a86         [2]     LEAX  6,SP
  005a b754         [1]     TFR   X,D
  005c 160000       [4]     JSR   SPI_ExchangeChar
  005f 1b81         [2]     LEAS  1,SP
  0061 0714         [4]     BSR   *+22 ;abs = 0077
  0063 1d000040     [4]     BCLR  _PTH,#64
  0067 3d           [5]     RTS   
  0068 c40f         [1]     ANDB  #15
  006a ea86         [3]     ORAB  6,SP
  006c 37           [2]     PSHB  
  006d 1a85         [2]     LEAX  5,SP
  006f b754         [1]     TFR   X,D
  0071 160000       [4]     JSR   SPI_ExchangeChar
  0074 1b81         [2]     LEAS  1,SP
  0076 3d           [5]     RTS   
  0077 1d000010     [4]     BCLR  _PTH,#16
  007b 1d000020     [4]     BCLR  _PTH,#32
  007f 3d           [5]     RTS   
  253:  // ----------------------------------------
  254:  // Analog_Put
  255:  // 
  256:  // Places a PWM cycle into the ADC for output
  257:  // Input:
  258:  //   channelNb is the number of the anlog input channel to output to
  259:  // Output:
  260:  //   none
  261:  // Conditions:
  262:  //   Assumes that the DAC has been set up
  263:  /*void Analog_Put(const TChannelNb channelNb)
  264:  {
  265:    // PWM into a filter(Low)
  266:    // PWMCNTn(counter) -> Duty -> Pin Logic -> PWMn
  267:    // 50 Duty Cycle => PWMDTY = 128, PWMPER = 256
  268:    // To simulate a sine wave, modify the duty cycles e.g.
  269:    // 0-> 25 -> 50 -> 25 -> 0
  270:    // Have the values hold over the period and it should display a sine wave
  271:    // 12 bit DAC
  272:    UINT8 channelNbHex, i;
  273:    TUINT16 rxByte;
  274:    UINT8 test = 0x00;
  275:    
  276:    switch (channelNb)
  277:    {
  278:      case Ch1:
  279:        channelNbHex = 0x30;
  280:      break;
  281:      case Ch2:
  282:        channelNbHex = 0x70;
  283:      break;
  284:    }
  285:    // DAC Data Structure:
  286:    // A1 A0   !PD !LDAC D11 D10 D9 D8 D7 D6 D5 D4 D3 D2 D1 D0
  287:    //|OutSel| |ContOps| |              Data                 |
  288:    // 2 1  0  3  4  5
  289:    // 0 25 50 50 25 0
  290:    //------------------------------------------------------------------------
  291:    // PWM2
  292:    // 4 Low (Inverted) for transfer (CS4) - DAC
  293:    for (i = 0; i < 50; i++);
  294:    
  295:    PTH_PTH4 = 0;
  296:    PTH_PTH5 = 0;
  297:    PTH_PTH6 = 1;
  298:    
  299:    
  300:    // Output Chan + Normal Operation + Input register updated [0110 0000]
  301:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  302:    asm nop;
  303:    //SPI_ExchangeChar( ((PWMCNT2 & 0x0F) | channelNbHex),  &rxByte.s.Hi);      
  304:    SPI_ExchangeChar(PWMCNT2, &rxByte.s.Lo);
  305:    
  306:    
  307:      // 0 High (Inverted) for no transfer
  308:    PTH_PTH4 = 0;
  309:    PTH_PTH5 = 0;
  310:    PTH_PTH6 = 0;
  311:    
  312:    
  313:    //------------------------------------------------------------------------
  314:    // PWM1
  315:    for (i = 0; i < 50; i++);
  316:    
  317:      // 4 Low (Inverted) for transfer (CS4) - DAC
  318:    PTH_PTH4 = 0;
  319:    PTH_PTH5 = 0;
  320:    PTH_PTH6 = 1;
  321:    
  322:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  323:    asm nop;
  324:    //SPI_ExchangeChar( ((PWMCNT1 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  325:    SPI_ExchangeChar(PWMCNT1, &rxByte.s.Lo);
  326:    
  327:    
  328:    // 0 High (Inverted) for no transfer
  329:    PTH_PTH4 = 0;
  330:    PTH_PTH5 = 0;
  331:    PTH_PTH6 = 0;
  332:    
  333:    
  334:    //------------------------------------------------------------------------
  335:    // PWM0
  336:    for (i = 0; i < 60; i++);
  337:    
  338:      // 4 Low (Inverted) for transfer (CS4) - DAC
  339:    PTH_PTH4 = 0;
  340:    PTH_PTH5 = 0;
  341:    PTH_PTH6 = 1;
  342:    
  343:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  344:    asm nop;
  345:    //SPI_ExchangeChar( ((PWMCNT0 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  346:    SPI_ExchangeChar(PWMCNT0, &rxByte.s.Lo);
  347:    
  348:    
  349:    // 0 High (Inverted) for no transfer
  350:    PTH_PTH4 = 0;
  351:    PTH_PTH5 = 0;
  352:    PTH_PTH6 = 0;
  353:    
  354:    for (i = 0; i < 100; i++);
  355:    
  356:      // 4 Low (Inverted) for transfer (CS4) - DAC
  357:    PTH_PTH4 = 0;
  358:    PTH_PTH5 = 0;
  359:    PTH_PTH6 = 1;
  360:    
  361:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  362:    asm nop;
  363:    //SPI_ExchangeChar( ((PWMCNT0 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  364:    SPI_ExchangeChar(PWMCNT0, &rxByte.s.Lo);
  365:    
  366:    
  367:    // 0 High (Inverted) for no transfer
  368:    PTH_PTH4 = 0;
  369:    PTH_PTH5 = 0;
  370:    PTH_PTH6 = 0;
  371:    
  372:    //------------------------------------------------------------------------
  373:    // PWM3
  374:    for (i = 0; i < 100; i++);
  375:      // 4 Low (Inverted) for transfer (CS4) - DAC
  376:    PTH_PTH4 = 0;
  377:    PTH_PTH5 = 0;
  378:    PTH_PTH6 = 1;
  379:    
  380:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  381:    asm nop;
  382:    //SPI_ExchangeChar( ((PWMCNT3 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  383:    SPI_ExchangeChar(PWMCNT3, &rxByte.s.Lo);
  384:    
  385:    
  386:    // 0 High (Inverted) for no transfer
  387:    PTH_PTH4 = 0;
  388:    PTH_PTH5 = 0;
  389:    PTH_PTH6 = 0;
  390:    
  391:    
  392:    for (i = 0; i < 60; i++);
  393:      // 4 Low (Inverted) for transfer (CS4) - DAC
  394:    PTH_PTH4 = 0;
  395:    PTH_PTH5 = 0;
  396:    PTH_PTH6 = 1;
  397:    
  398:    
  399:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  400:    asm nop;
  401:    //SPI_ExchangeChar( ((PWMCNT3 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  402:    SPI_ExchangeChar(PWMCNT3, &rxByte.s.Lo);
  403:    
  404:    
  405:    // 0 High (Inverted) for no transfer
  406:    PTH_PTH4 = 0;
  407:    PTH_PTH5 = 0;
  408:    PTH_PTH6 = 0;
  409:    
  410:    
  411:    //------------------------------------------------------------------------
  412:    // PWM4
  413:    for (i = 0; i < 50; i++);
  414:    
  415:      // 4 Low (Inverted) for transfer (CS4) - DAC
  416:    PTH_PTH4 = 0;
  417:    PTH_PTH5 = 0;
  418:    PTH_PTH6 = 1;
  419:    
  420:    
  421:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  422:    asm nop;
  423:    //SPI_ExchangeChar( ((PWMCNT4 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  424:    SPI_ExchangeChar(PWMCNT4, &rxByte.s.Lo);
  425:    
  426:    
  427:    // 0 High (Inverted) for no transfer
  428:    PTH_PTH4 = 0;
  429:    PTH_PTH5 = 0;
  430:    PTH_PTH6 = 0;
  431:    PTH_PTH6 = 0;
  432:    
  433:    //------------------------------------------------------------------------
  434:    // PWM5
  435:    for (i = 0; i < 50; i++);
  436:    
  437:    // 4 Low (Inverted) for transfer (CS4) - DAC
  438:    PTH_PTH4 = 0;
  439:    PTH_PTH5 = 0;
  440:    PTH_PTH6 = 1;
  441:    
  442:    SPI_ExchangeChar(channelNbHex | test,  &rxByte.s.Hi);
  443:    asm nop;
  444:    //SPI_ExchangeChar( ((PWMCNT5 & 0x0F) | channelNbHex),  &rxByte.s.Hi);
  445:    SPI_ExchangeChar(PWMCNT5, &rxByte.s.Lo);
  446:    
  447:    
  448:    // 0 High (Inverted) for no transfer
  449:    PTH_PTH4 = 0;
  450:    PTH_PTH5 = 0;
  451:    PTH_PTH6 = 0;
  452:  
  453:    
  454:  }*/
  455:  
